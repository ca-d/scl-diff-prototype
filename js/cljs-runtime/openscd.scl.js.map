{"version":3,"sources":["openscd/scl.cljs"],"mappings":"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","names":["openscd.scl/after-next-paint","f","js/requestAnimationFrame","js/setTimeout","openscd.scl/identifier-attributes","openscd.scl/schema-references","openscd.scl/defaults","p__19850","map__19851","cljs.core/--destructure-map","cljs.core.get","openscd.scl/with-defaults","attrs","tag","element","default-attrs","cljs.core.keyword","cljs.core.assoc","cljs.core.merge","p__19852","map__19853","openscd.scl/without-identifiers","cljs.core.apply","cljs.core/dissoc","G__19854","p__19856","map__19857","openscd.scl/tos","fields","to","from","scope","elm","ancestor","and__5000__auto__","p1__19855#","cljs.core/some","cljs.core._EQ_","cljs.core/vec","referents","cljs.core.filter","target","cljs.core/every?","p__19858","map__19859","p__19860","map__19861","openscd.scl/with-schema-references","content","refs","cljs.core.map","openscd.scl/domToEdn","cljs.core/complement","cljs.core/nil?","cljs.core/flatten","cljs.core.repeat","cljs.core/meta","or__5002__auto__","cljs.core.into","openscd.scl/fcda-references","p__19865","p__19866","map__19867","map__19868","map__19869","ldInst","prefix","lnClass","lnInst","doName","daName","description","deep","opts","SCL","IED","prefix-selector","clojure.string/blank?","selector","LN","lnType","LNType","do-name-segments","p1__19862#","clojure.string/replace","clojure.string.split","DO","cljs.core/first","DOI","SDI","p__19870","map__19871","sdi","names","new-sdi","cljs.core/empty?","cljs.core/rest","DAI","cljs.core/last","DOType","sdo-type","p__19872","map__19873","sdo","da-name-segments","p1__19863#","DA","DAType","bda-type","p__19874","map__19875","bda","linked-type","cljs.core/identity","extra-content","p1__19864#","new-content","cljs.core/count","openscd.scl/special-references","openscd.scl/with-references","cljs.core/contains?","fexpr__19876","this__5300__auto__","k__5301__auto__","this__5302__auto__","k19878","else__5303__auto__","G__19882","cljs.core/Keyword","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__19883","vec__19884","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__19877","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this19879","other19880","this__5310__auto__","k__5311__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5307__auto__","G__19887","this__5308__auto__","k__5309__auto__","pred__19888","cljs.core/keyword-identical?","expr__19889","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","openscd.scl/Elm","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__19881","extmap__5342__auto__","G__19891","cljs.core/record?","openscd.scl/->Elm","openscd.scl/map->Elm","cljs.core/memoize","p__19894","map__19895","dom","pred__19896","expr__19897","cljs.core/=","clojure.string/trim","cljs.core.not_EQ_","cljs.core/sorted-map","cljs.core.mapcat","a","cljs.core/set","p1__19892#","p1__19893#","openscd.scl/render-attributes","table","js/document.createElement","seq__19899","chunk__19900","count__19901","i__19902","vec__19909","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__19912","cljs.core/next","k","v","tr","th","td","ns-th","components","cljs.core/name","anm","ans-component","ans","openscd.scl/tag-and-id","node","elm-id","js/module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$identity.identity","var_args","G__19917","openscd.scl/render-node","js/Error","data","openscd.scl.render_node","sibling-count","odd","old-or-new","span","details","summary","child-count","title","e","cljs.core/hash","p1__19915#","cljs.core/run!","cljs.core/not","cljs.core.array_seq","cljs.core.sort_by","openscd.scl/show-data","js/document.body","openscd.scl/render-attribute-diff","ours","theirs","ks","cljs.core/sorted-set","cljs.core/keys","seq__19918","chunk__19919","count__19920","i__19921","td-ours","td-arrow","td-theirs","v-ours","v-theirs","G__19928","openscd.scl/render-node-diff","openscd.scl.render_node_diff","p1__19922#","their-identified-elements","cljs.core/group-by","our-identified-elements","element-pairs","p1__19923#","cljs.core/second","cljs.core/vals","cljs.core.merge_with","cljs.core/concat","their-identities","our-identities","their-elements","p1__19924#","clojure.set.difference","our-elements","p1__19925#","elements","p1__19926#","nodes","cljs.core.conj","clojure.string.join","cljs.core/string?","node-or-pair","vec__19929","openscd.scl/show-diff","edn1","edn2","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","openscd.scl/sclDomDiff","p__19936","map__19937","seq19932","G__19933","G__19934","G__19935","self__5711__auto__","dom1","dom2","openscd.scl/sclDomToEdn","p__19940","map__19941","seq19938","G__19939"],"sourcesContent":["(ns openscd.scl\n  (:require [\"@openenergytools/scl-lib/dist/tBaseElement/identity.js\" :rename\n             {identity id}]\n            [clojure.string :refer [blank? trim split replace join]]\n            [clojure.set :refer [difference]]))\n\n(defn after-next-paint [f] (js/requestAnimationFrame (fn [] (js/setTimeout f))))\n\n(def identifier-attributes\n  {:Association [:iedName :ldInst :prefix :lnClass :lnInst :lnType],\n   :ClientLN [:apRef :iedName :ldInst :prefix :lnClass :lnInst],\n   :ConnectedAP [:iedName :apName],\n   :DAI [:name :ix],\n   :ExtRef [:iedName :intAddr :ldInst :prefix :lnClass :lnInst :doName :daName\n            :serviceType :srcLDInst :srcPrefix :srcLNClass :srcLNInst\n            :srcCBName],\n   ; :FCDA [:ldInst :prefix :lnClass :lnInst :doName :daName :fc :ix],\n   :GSE [:ldInst :cbName],\n   :Hitem [:version :revision],\n   :IEDName [:apRef :ldInst :prefix :lnClass :lnInst],\n   :KDC [:iedName :apName],\n   :LDevice [:IED :inst],\n   :LN [:prefix :lnClass :inst],\n   :LN0 [:prefix :lnClass :inst],\n   :LNode [:iedName :ldInst :prefix :lnClass :lnInst :lnType],\n   :PhysConn [:type],\n   :SDI [:name :ix],\n   :SMV [:ldInst :cbName],\n   :Terminal [:connectivityNode]})\n\n(def schema-references\n  {:ServerAt [{:fields [{:to \"name\", :from \"apName\"}],\n               :to \":scope>AccessPoint\",\n               :from \":scope>AccessPoint>ServerAt\",\n               :scope \"IED\"}],\n   :LogControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>LogControl\",\n                 :scope \"LN\"}\n                {:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>LogControl\",\n                 :scope \"LN0\"}],\n   ; :ConnectedAP [{:fields [{:to \"name\", :from \"iedName\"}],\n   ;                :to \":scope>IED\", :from\n   ;                \":scope>Communication>SubNetwork>ConnectedAP\", :scope\n   ;                \"SCL\"}],\n   :DO [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DOType\",\n         :from \":scope>LNodeType>DO\",\n         :scope \"DataTypeTemplates\"}],\n   :SDO [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DOType\",\n          :from \":scope>DOType>SDO\",\n          :scope \"DataTypeTemplates\"}],\n   :BDA [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DAType, :scope>EnumType\",\n          :from \":scope>DOType>DA,\n          :scope>DAType>BDA\",\n          :scope \"DataTypeTemplates\"}],\n   ;   :Terminal [{:fields [{:to \"name\", :from \"substationName\"}],\n   ;               :to \":scope>Substation, :scope>Process,\n   ;               :scope>Line\", :from \":scope Terminal\", :scope\n   ;               \"SCL\"}],\n   ; :LN0 [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;        :to \":scope>DataTypeTemplates>LNodeType\",\n   ;        :from \":scope>IED>AccessPoint>Server>LDevice>LN0\",\n   ;        :scope \"SCL\"}],\n   :SampledValueControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                          :to \":scope>DataSet\",\n                          :from \":scope>SampledValueControl\",\n                          :scope \"LN0\"}],\n   :GSEControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>GSEControl\",\n                 :scope \"LN0\"}],\n   :DA [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DAType, :scope>EnumType\",\n         :from \":scope>DOType>DA, :scope>DAType>BDA\",\n         :scope \"DataTypeTemplates\"}],\n   :ReportControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                    :to \":scope>DataSet\",\n                    :from \":scope>ReportControl\",\n                    :scope \"LN\"}\n                   {:fields [{:to \"name\", :from \"datSet\"}],\n                    :to \":scope>DataSet\",\n                    :from \":scope>ReportControl\",\n                    :scope \"LN0\"}]\n   ; :LN [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\",\n   ;       :from \":scope>IED>AccessPoint>LN\",\n   ;       :scope \"SCL\"}\n   ;      {:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ;      \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\", :from\n   ;       \":scope>IED>AccessPoint>Server>LDevice>LN\",\n   ;       :scope \"SCL\"}]})\n  })\n\n(def defaults\n  {:AccessPoint {:clock \"false\", :desc \"\", :kdc \"false\", :router \"false\"},\n   :Association {:prefix \"\"},\n   :BDA {:count \"0\", :desc \"\", :valImport \"false\", :valKind \"Set\"},\n   :Bay {:desc \"\"},\n   :ClientLN {:prefix \"\"},\n   :ClientServices {:bufReport \"false\",\n                    :goose \"false\",\n                    :gsse \"false\",\n                    :noIctBinding \"false\",\n                    :rGOOSE \"false\",\n                    :rSV \"false\",\n                    :readLog \"false\",\n                    :supportsLdName \"false\",\n                    :sv \"false\",\n                    :unbufReport \"false\"},\n   :CommProt {:ipv6 \"false\"},\n   :Communication {:desc \"\"},\n   :ConductingEquipment {:desc \"\", :virtual \"false\"},\n   :ConfDataSet {:modify \"true\"},\n   :ConfLNs {:fixLnInst \"false\", :fixPrefix \"false\"},\n   :ConfReportControl {:bufConf \"false\", :bufMode \"both\"},\n   :ConnectedAP {:desc \"\"},\n   :ConnectivityNode {:desc \"\"},\n   :DA {:count \"0\",\n        :dchg \"false\",\n        :desc \"\",\n        :dupd \"false\",\n        :qchg \"false\",\n        :valImport \"false\",\n        :valKind \"Set\"},\n   :DAI {:desc \"\"},\n   :DAType {:desc \"\", :iedType \"\"},\n   :DO {:desc \"\", :transient \"false\"},\n   :DOI {:desc \"\"},\n   :DOType {:desc \"\", :iedType \"\"},\n   :DataSet {:desc \"\"},\n   :EnumType {:desc \"\"},\n   :EnumVal {:desc \"\"},\n   :EqFunction {:desc \"\"},\n   :EqSubFunction {:desc \"\"},\n   :FCDA {:prefix \"\"},\n   :FileHandling {:ftp \"false\", :ftps \"false\", :mms \"true\"},\n   :Function {:desc \"\"},\n   :GOOSE {:fixedOffs \"false\", :goose \"true\", :rGOOSE \"false\"},\n   :GOOSESecurity {:desc \"\"},\n   :GSE {:desc \"\"},\n   :GSEControl\n     {:desc \"\", :fixedOffs \"false\", :securityEnable \"None\", :type \"GOOSE\"},\n   :GSESettings {:appID \"Fix\",\n                 :cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :dataLabel \"Fix\",\n                 :kdaParticipant \"false\"},\n   :GeneralEquipment {:desc \"\", :virtual \"false\"},\n   :Header {:nameStructure \"IEDName\", :revision \"\"},\n   :IED {:desc \"\",\n         :engRight \"full\",\n         :originalSclRelease \"1\",\n         :originalSclRevision \"A\",\n         :originalSclVersion \"2003\"},\n   :Inputs {:desc \"\"},\n   :LDevice {:desc \"\"},\n   :LN {:desc \"\", :prefix \"\"},\n   :LNode {:desc \"\", :iedName \"None\", :ldInst \"\", :lnInst \"\", :prefix \"\"},\n   :LNodeType {:desc \"\", :iedType \"\"},\n   :Line {:desc \"\"},\n   :Log {:desc \"\"},\n   :LogControl {:bufTime \"0\",\n                :desc \"\",\n                :intgPd \"0\",\n                :lnClass \"LLN0\",\n                :logEna \"true\",\n                :prefix \"\",\n                :reasonCode \"true\"},\n   :LogSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :intgPd \"Fix\",\n                 :logEna \"Fix\",\n                 :trgOps \"Fix\"},\n   :McSecurity {:encryption \"false\", :signature \"false\"},\n   :NeutralPoint {:desc \"\", :name \"\"},\n   :PhysConn {:desc \"\"},\n   :PowerTransformer {:desc \"\", :virtual \"false\"},\n   :Process {:desc \"\"},\n   :ProtNs {:type \"8-MMS\"},\n   :RedProt {:hsr \"false\", :prp \"false\", :rstp \"false\"},\n   :ReportControl {:bufOvfl \"true\",\n                   :bufTime \"0\",\n                   :buffered \"false\",\n                   :configRef \"false\",\n                   :dataRef \"false\",\n                   :dataSet \"false\",\n                   :desc \"\",\n                   :entryID \"false\",\n                   :indexed \"true\",\n                   :intgPd \"0\",\n                   :reasonCode \"false\",\n                   :seqNum \"false\",\n                   :timeStamp \"false\"},\n   :ReportSettings {:bufTime \"Fix\",\n                    :cbName \"Fix\",\n                    :datSet \"Fix\",\n                    :intgPd \"Fix\",\n                    :optFields \"Fix\",\n                    :owner \"false\",\n                    :resvTms \"false\",\n                    :rptID \"Fix\",\n                    :trgOps \"Fix\"},\n   :RptEnabled {:desc \"\", :max \"1\"},\n   :SDI {:desc \"\"},\n   :SDO {:count \"0\", :desc \"\"},\n   :SMV {:desc \"\"},\n   :SMVSecurity {:desc \"\"},\n   :SMVSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :kdaParticipant \"false\",\n                 :nofASDU \"Fix\",\n                 :optFields \"Fix\",\n                 :pdcTimeStamp \"false\",\n                 :samplesPerSec \"false\",\n                 :smpRate \"Fix\",\n                 :svID \"Fix\",\n                 :synchSrcId \"false\"},\n   :SMVsc\n     {:delivery \"multicast\", :deliveryConf \"false\", :rSV \"false\", :sv \"true\"},\n   :SampledValueControl {:dataSet \"false\",\n                         :desc \"\",\n                         :multicast \"true\",\n                         :refreshTime \"false\",\n                         :sampleRate \"false\",\n                         :security \"false\",\n                         :securityEnable \"None\",\n                         :smpMod \"SmpPerPeriod\",\n                         :synchSourceId \"false\",\n                         :timestamp \"false\"},\n   :Server {:certificate \"false\",\n            :desc \"\",\n            :none \"true\",\n            :password \"false\",\n            :strong \"false\",\n            :timeout \"30\",\n            :weak \"false\"},\n   :ServerAt {:desc \"\"},\n   :Services {:nameLength \"32\"},\n   :SettingControl {:actSG \"1\", :desc \"\"},\n   :SettingGroups {:resvTms \"false\"},\n   :SubEquipment {:desc \"\", :phase \"none\", :virtual \"false\"},\n   :SubFunction {:desc \"\"},\n   :SubNetwork {:desc \"\"},\n   :Substation {:desc \"\"},\n   :TapChanger {:desc \"\", :virtual \"false\"},\n   :Terminal {:desc \"\", :name \"\"},\n   :TimeSyncProt\n     {:c37_238 \"false\", :iec61850_9_3 \"false\", :other \"false\", :sntp \"true\"},\n   :TransformerWinding {:desc \"\", :virtual \"false\"},\n   :TrgOps\n     {:dchg \"false\", :dupd \"false\", :gi \"true\", :period \"false\", :qchg \"false\"},\n   :ValueHandling {:setToRO \"false\"},\n   :Voltage {:multiplier \"\"},\n   :VoltageLevel {:desc \"\"}})\n\n(declare scl)\n(declare domToEdn)\n\n(defn with-defaults\n  [{:keys [attrs tag], :as element}]\n  (let [default-attrs (get defaults (keyword tag))]\n    (assoc element\n      :attrs (if default-attrs (merge default-attrs attrs) attrs))))\n\n(defn without-identifiers\n  [{:keys [attrs], :as element}]\n  (assoc element\n    :attrs (apply dissoc\n             attrs\n             :name\n             :id\n             (identifier-attributes (keyword (:tag element))))))\n\n(defn tos\n  [{:keys [fields to from scope]} elm]\n  (let [ancestor (.closest elm scope)]\n    (if (and ancestor (some #(= elm %) (vec (.querySelectorAll ancestor from))))\n      (let [referents (filter (fn [target]\n                                (every? (fn [{:keys [from to]}]\n                                          (= (.getAttribute target to)\n                                             (.getAttribute elm from)))\n                                        fields))\n                        (vec (.querySelectorAll ancestor to)))]\n        referents)\n      nil)))\n\n(defn with-schema-references\n  [{:keys [tag content], :as element}]\n  (let [refs (get schema-references (keyword tag))\n        referents (map domToEdn\n                    (filter (complement nil?)\n                      (flatten\n                        (map tos refs (repeat (::element (meta element)))))))]\n    (assoc element\n      :content (when (or content referents) (into content referents)))))\n\n(def fcda-references\n  (fn [{:keys [content],\n        {:keys [ldInst prefix lnClass lnInst doName daName]} :attrs,\n        ; TODO(ca-d): add fc and ix?\n        :as description} & {:keys [deep], :as opts}]\n    (let [element (::element (meta description))\n          SCL (.closest element \"SCL\")\n          IED (.closest element \"IED\")\n          prefix-selector (when-not (blank? prefix)\n                            (str \"[prefix='\" prefix \"']\"))\n          selector (if (= lnClass \"LLN0\")\n                     (str \"LDevice[inst='\" ldInst \"'] LN0[inst='\" lnInst \"']\")\n                     (str \"LDevice[inst='\"\n                          ldInst\n                          \"'] LN\"\n                          prefix-selector\n                          \"[inst='\"\n                          lnInst\n                          \"'][lnClass='\"\n                          lnClass\n                          \"']\"))\n          LN (.querySelector IED selector)\n          lnType (.getAttribute LN \"lnType\")\n          LNType (.querySelector\n                   SCL\n                   (str \"DataTypeTemplates LNodeType[id='\" lnType \"']\"))\n          do-name-segments (map #(replace % #\"\\\\(\\\\d+\\\\)\" \"\")\n                             (split doName #\"\\.\"))\n          DO (.querySelector LNType\n                             (str \"DO[name='\" (first do-name-segments) \"']\"))\n          DOI (when DO\n                (.querySelector\n                  LN\n                  (str \":scope > DOI[name='\" (first do-name-segments) \"']\")))\n          SDI (:sdi ((fn [{:keys [sdi names]}]\n                       (when-not (nil? sdi)\n                         (let [new-sdi (.querySelector sdi\n                                                       (str \":scope >SDI[name='\"\n                                                            (first names)\n                                                            \"']\"))]\n                           (if (or (nil? new-sdi) (empty? (rest names)))\n                             {:sdi sdi, :names (rest names)}\n                             (recur {:sdi new-sdi, :names (rest names)})))))\n                      {:sdi DOI, :names (rest do-name-segments)}))\n          DAI (when SDI\n                (.querySelector\n                  SDI\n                  (str \":scope DAI[name='\" (last do-name-segments) \"']\")))\n          DOType (when DO\n                   (.querySelector SCL\n                                   (str \"DataTypeTemplates DOType[id='\"\n                                        (.getAttribute DO \"type\")\n                                        \"']\")))\n          sdo-type (:sdo-type\n                     ((fn [{:keys [sdo-type names]}]\n                        (when-not (nil? sdo-type)\n                          (let [sdo (.querySelector\n                                      sdo-type\n                                      (str \"SDO[name='\" (first names) \"']\"))]\n                            (if (nil? sdo)\n                              {:sdo-type sdo-type, :names (rest names)}\n                              (recur {:sdo-type\n                                        (.querySelector\n                                          SCL\n                                          (str \"DataTypeTemplates DOType[id='\"\n                                               (.getAttribute sdo \"type\")\n                                               \"'] SDO\")),\n                                      :names (rest names)})))))\n                       {:sdo-type DOType, :names (rest do-name-segments)}))\n          da-name-segments (map #(replace % #\"\\\\(\\\\d+\\\\)\" \"\")\n                             (split daName #\"\\\\.\"))\n          DA (when sdo-type\n               (.querySelector sdo-type\n                               (str \"DA[name='\" (first da-name-segments) \"']\")))\n          DAType (when DA\n                   (.querySelector SCL\n                                   (str \"DataTypeTemplates DAType[id='\"\n                                        (.getAttribute DA \"type\")\n                                        \"']\")))\n          bda-type (:bda-type\n                     ((fn [{:keys [bda-type names]}]\n                        (when-not (nil? bda-type)\n                          (let [bda (.querySelector\n                                      bda-type\n                                      (str \"BDA[name='\" (first names) \"']\"))]\n                            (if (nil? bda)\n                              {:bda-type bda-type, :names (rest names)}\n                              (recur\n                                {:bda-type\n                                   (.querySelector\n                                     SCL\n                                     (str\n                                       \"DataTypeTemplates DAType[id='\"\n                                         (.getAttribute bda \"type\")\n                                       \"'] BDA, DataTypeTemplates EnumType[id='\"\n                                         (.getAttribute bda \"type\"))),\n                                 :names (rest names)})))))\n                       {:bda-type DAType, :names (rest da-name-segments)}))\n          linked-type (first (filter identity\n                               [bda-type DAType sdo-type DOType LNType]))\n          extra-content (map #(domToEdn % opts)\n                          (filter identity [(and deep linked-type) DAI]))\n          new-content (into content extra-content)]\n      (if (count extra-content)\n        (assoc description :content new-content)\n        description))))\n\n(def special-references {:FCDA fcda-references})\n\n(defn with-references\n  [element opts]\n  (if (contains? special-references (keyword (:tag element)))\n    ((get special-references (keyword (:tag element))) element opts)\n    (if (contains? schema-references (keyword (:tag element)))\n      (with-schema-references element)\n      element)))\n\n(defrecord Elm [^js/String tag ^PersistentTreeMap attrs\n                ^PersistentHashSet content])\n\n(def ^:export domToEdn\n  (memoize\n    (fn [dom & {:keys [deep], :or {deep false}, :as opts}]\n      (if dom\n        (condp = (.-nodeType dom)\n          3 (trim (.-textContent dom)) ; text\n          4 (.-data dom) ; CDATA\n          9 (recur (.-documentElement dom) opts) ; document\n          1 (when (or deep (not= (.-tagName dom) \"DataTypeTemplates\"))\n              (-> ^{::element dom}\n                  {:tag (.-tagName dom),\n                   :attrs (apply sorted-map ; FIXME: Do we need to sort?\n                                 (mapcat (fn [a] [(keyword (.-name a))\n                                                  (.-value a)])\n                                   (.-attributes dom))),\n                   :content (set (filter #(not (or (nil? %) (blank? %)))\n                                   (map #(domToEdn % opts)\n                                     (.-childNodes dom))))}\n                  with-defaults\n                  without-identifiers\n                  (with-references opts))) ; element\n          nil)\n        nil))))\n\n(defn render-attributes\n  [attrs target]\n  (let [table (js/document.createElement \"table\")]\n    (doseq [[k v] attrs]\n      (let [tr (js/document.createElement \"tr\")\n            th (js/document.createElement \"th\")\n            td (js/document.createElement \"td\")\n            ns-th (js/document.createElement \"th\")\n            components (clojure.string/split (name k) #\":\" 2)\n            anm (last components)\n            ans-component (first components)\n            ans (if (= anm ans-component) \"\" ans-component)]\n        (set! (.-textContent ns-th) ans)\n        (set! (.-textContent th) anm)\n        (if (nil? v)\n          (set! (.-innerHTML td) \"<i>(missing)</i>\")\n          (if (blank? v)\n            (set! (.-innerHTML td) \"<i>(empty)</i>\")\n            (set! (.-textContent td) v)))\n        (.appendChild tr ns-th)\n        (.appendChild tr th)\n        (.appendChild tr td)\n        (.appendChild table tr)))\n    (.appendChild target table)))\n\n(defn tag-and-id\n  [node]\n  (if (and (:tag node) (::element (meta node)))\n    (let [elm-id (id (::element (meta node)))]\n      [(:tag node) (if (string? elm-id) elm-id nil)])\n    nil))\n\n(defn render-node\n  ([data target] (render-node data target 2))\n  ([data target sibling-count] (render-node data target sibling-count false))\n  ([data target sibling-count odd]\n   (render-node data target sibling-count odd nil))\n  ([data target sibling-count odd old-or-new]\n   (if (string? data)\n     (when (not (clojure.string/blank? data))\n       (let [span (js/document.createElement \"span\")]\n         (set! (.-textContent span) data)\n         (.append target span)))\n     (let [details (js/document.createElement \"details\")\n           summary (js/document.createElement \"summary\")\n           child-count (count (filter :tag (:content data)))\n           title (id (::element (meta data)))]\n       (when odd (set! (.-className details) \"odd\"))\n       (when old-or-new\n         (-> summary\n             .-classList\n             (.add (name old-or-new))))\n       (set! (.-textContent summary) (str (:tag data) \" \" title \" \"))\n       (.appendChild details summary)\n       (.appendChild target details)\n       (.addEventListener summary\n                          \"contextmenu\"\n                          (fn [e]\n                            (.preventDefault e)\n                            (.append summary (str \" \" (hash data)))\n                            (.preventDefault e)))\n       (.addEventListener summary\n                          \"mousedown\"\n                          (fn [e]\n                            (when (= (.-button e) 1)\n                              (.preventDefault e)\n                              (run! #(when (= (.-tagName %) \"DETAILS\")\n                                       (set! (.-open %) (not (.-open %))))\n                                    (array-seq (.-children details))))))\n       (.addEventListener\n         details\n         \"toggle\"\n         (fn []\n           (when (and (.-open details)\n                      (-> details\n                          .-classList\n                          (.contains \"rendered\")\n                          not))\n             (-> details\n                 .-classList\n                 (.add \"rendered\"))\n             (render-attributes (:attrs data) details)\n             (let [span (js/document.createElement \"span\")]\n               (set! (.-textContent span) \"Loading...\")\n               (.appendChild details span)\n               (after-next-paint\n                 (fn []\n                   (run! (fn [node]\n                           (render-node node details child-count (not odd)))\n                         (sort-by tag-and-id (:content data)))\n                   (.removeChild details span)))))))\n       (when (< sibling-count 2) (set! (.-open details) true))))))\n\n(defn show-data [data] (render-node data js/document.body) data)\n\n(defn render-attribute-diff\n  [ours theirs target]\n  (when-not (= ours theirs)\n    (let [table (js/document.createElement \"table\")\n          ks (apply sorted-set (into (keys theirs) (keys ours)))]\n      (doseq [k ks]\n        (let [tr (js/document.createElement \"tr\")\n              th (js/document.createElement \"th\")\n              td-ours (js/document.createElement \"td\")\n              td-arrow (js/document.createElement \"td\")\n              td-theirs (js/document.createElement \"td\")\n              ns-th (js/document.createElement \"th\")\n              components (clojure.string/split (name k) #\":\" 2)\n              anm (last components)\n              ans-component (first components)\n              ans (if (= anm ans-component) \"\" ans-component)\n              v-ours (ours k)\n              v-theirs (theirs k)]\n          (when-not (= v-ours v-theirs)\n            (set! (.-textContent ns-th) ans)\n            (set! (.-textContent th) anm)\n            (if (nil? v-ours)\n              (set! (.-innerHTML td-ours) \"<i>(missing)</i>\")\n              (if (blank? v-ours)\n                (set! (.-innerHTML td-ours) \"<i>(empty)</i>\")\n                (set! (.-textContent td-ours) v-ours)))\n            (-> td-arrow\n                .-classList\n                (.add \"arrow\"))\n            (set! (.-textContent td-arrow) \"->\")\n            (if (nil? v-theirs)\n              (set! (.-innerHTML td-theirs) \"<i>(missing)</i>\")\n              (if (blank? v-theirs)\n                (set! (.-innerHTML td-theirs) \"<i>(empty)</i>\")\n                (set! (.-textContent td-theirs) v-theirs)))\n            (.appendChild tr ns-th)\n            (.appendChild tr th)\n            (.appendChild tr td-ours)\n            (.appendChild tr td-arrow)\n            (.appendChild tr td-theirs)\n            (.appendChild table tr))))\n      (.appendChild target table))))\n\n(defn render-node-diff\n  ([ours theirs target] (render-node-diff ours theirs target 2))\n  ([ours theirs target sibling-count]\n   (render-node-diff ours theirs target sibling-count false))\n  ([ours theirs target sibling-count odd]\n   (when-not (= ours theirs)\n     (if (nil? theirs)\n       (render-node ours target sibling-count odd :old)\n       (if (nil? ours)\n         (render-node theirs target sibling-count odd :new)\n         (if (string? ours)\n           (when-not (and (blank? ours) (blank? theirs))\n             (let [span (js/document.createElement \"span\")]\n               (set! (.-textContent span) (str ours \" -> \" theirs))\n               (.append target span)))\n           (let [details (js/document.createElement \"details\")\n                 summary (js/document.createElement \"summary\")\n                 title (id (or (::element (meta ours))\n                               (::element (meta theirs))))]\n             (when odd (set! (.-className details) \"odd\"))\n             (-> details\n                 .-classList\n                 (.add \"diff\"))\n             (set! (.-textContent summary) (str (:tag ours) \" \" title \" \"))\n             (.appendChild details summary)\n             (.appendChild target details)\n             (.addEventListener\n               summary\n               \"contextmenu\"\n               (fn [e]\n                 (.append summary (str \" \" (hash ours) \" -> \" (hash theirs)))\n                 (.preventDefault e)))\n             (.addEventListener summary\n                                \"auxclick\"\n                                (fn [e]\n                                  (when (= (.-button e) 1)\n                                    (.preventDefault e)\n                                    (run! #(when (= (.-tagName %) \"DETAILS\")\n                                             (set! (.-open %) (not (.-open %))))\n                                          (array-seq (.-children details))))))\n             (.addEventListener\n               details\n               \"toggle\"\n               (fn []\n                 (when (and (.-open details)\n                            (-> details\n                                .-classList\n                                (.contains \"rendered\")\n                                not))\n                   (-> details\n                       .-classList\n                       (.add \"rendered\"))\n                   (render-attribute-diff (:attrs ours) (:attrs theirs) details)\n                   (let [span (js/document.createElement \"span\")]\n                     (set! (.-textContent span) \"Loading...\")\n                     (.appendChild details span)\n                     (after-next-paint\n                       (fn []\n                         (let [their-identified-elements\n                                 (group-by tag-and-id\n                                           (filter :tag (:content theirs)))\n                               our-identified-elements\n                                 (group-by tag-and-id\n                                           (filter :tag (:content ours)))\n                               element-pairs\n                                 (filter #(and (= (count %) 2)\n                                               (not= (first %) (second %)))\n                                   (vals (merge-with concat\n                                                     their-identified-elements\n                                                     our-identified-elements)))\n                               their-identities\n                                 (set (keys their-identified-elements))\n                               our-identities (set (keys\n                                                     our-identified-elements))\n                               their-elements\n                                 (map #(first (their-identified-elements %))\n                                   (difference their-identities our-identities))\n                               our-elements\n                                 (map #(first (our-identified-elements %))\n                                   (difference our-identities their-identities))\n                               child-count (+ (count element-pairs)\n                                              (count their-elements)\n                                              (count our-elements))\n                               elements (sort-by #(or (tag-and-id %)\n                                                      (tag-and-id (first %)))\n                                                 (concat element-pairs\n                                                         their-elements\n                                                         our-elements))\n                               nodes\n                                 (conj\n                                   elements\n                                   [(join \" \" (filter string? (:content ours)))\n                                    (join \" \"\n                                          (filter string? (:content theirs)))])]\n                           (run! (fn [node-or-pair]\n                                   (if (:tag node-or-pair)\n                                     (render-node node-or-pair\n                                                  details\n                                                  child-count\n                                                  (not odd)\n                                                  :new)\n                                     (let [[ours theirs] node-or-pair]\n                                       (render-node-diff ours\n                                                         theirs\n                                                         details\n                                                         child-count\n                                                         (not odd)))))\n                                 nodes)\n                           (.removeChild details span))))))))\n             (when (< sibling-count 2) (set! (.-open details) true)))))))))\n\n(defn show-diff\n  [edn1 edn2 target]\n  (when-not (= edn1 edn2) (render-node-diff edn1 edn2 target)))\n\n(defn ^:export sclDomDiff\n  [dom1 dom2 target & {:as opts}]\n  (let [edn1 (domToEdn dom1 opts)\n        edn2 (domToEdn dom2 opts)]\n    (show-diff edn1 edn2 target)))\n\n(defn ^:export sclDomToEdn [dom & {:as opts}] (domToEdn dom opts))\n"]}