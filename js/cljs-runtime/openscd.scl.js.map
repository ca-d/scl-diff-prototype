{"version":3,"sources":["openscd/scl.cljs"],"mappings":"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","names":["openscd.scl/after-next-paint","f","js/requestAnimationFrame","js/setTimeout","openscd.scl/identifier-attributes","openscd.scl/schema-references","openscd.scl/defaults","p__21079","map__21080","cljs.core/--destructure-map","cljs.core.get","openscd.scl/with-defaults","attrs","tag","element","default-attrs","cljs.core.keyword","cljs.core.assoc","cljs.core.merge","p__21081","map__21082","openscd.scl/without-identifiers","cljs.core.apply","cljs.core/dissoc","G__21083","p__21085","map__21086","openscd.scl/tos","fields","to","from","scope","elm","ancestor","and__5000__auto__","p1__21084#","cljs.core/some","cljs.core._EQ_","cljs.core/vec","referents","cljs.core.filter","target","cljs.core/every?","p__21087","map__21088","p__21089","map__21090","openscd.scl/with-schema-references","content","refs","cljs.core.map","openscd.scl/domToEdn","cljs.core/complement","cljs.core/nil?","cljs.core/flatten","cljs.core.repeat","cljs.core/meta","or__5002__auto__","cljs.core.into","openscd.scl/fcda-references","p__21093","map__21094","map__21095","ldInst","prefix","lnClass","lnInst","doName","daName","description","SCL","IED","selector","LN","lnType","LNType","do-name-segments","p1__21091#","clojure.string/replace","clojure.string.split","DO","cljs.core/first","DOType","sdo-type","p__21096","map__21097","names","sdo","cljs.core/rest","da-name-segments","p1__21092#","DA","DAType","bda-type","p__21098","map__21099","bda","child","cljs.core/identity","cljs.core.conj","openscd.scl/special-references","openscd.scl/with-references","cljs.core/contains?","fexpr__21100","this__5300__auto__","k__5301__auto__","this__5302__auto__","k21102","else__5303__auto__","G__21106","cljs.core/Keyword","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__21107","vec__21108","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__21101","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","cljs.core/count","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this21103","other21104","this__5310__auto__","k__5311__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5307__auto__","G__21111","this__5308__auto__","k__5309__auto__","pred__21112","cljs.core/keyword-identical?","expr__21113","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","openscd.scl/Elm","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__21105","extmap__5342__auto__","G__21115","cljs.core/record?","openscd.scl/->Elm","openscd.scl/map->Elm","cljs.core/memoize","dom","pred__21117","expr__21118","cljs.core/=","clojure.string/trim","cljs.core.not_EQ_","cljs.core/sorted-map","cljs.core.mapcat","a","cljs.core/set","p1__21116#","clojure.string/blank?","openscd.scl/render-attributes","table","js/document.createElement","seq__21120","chunk__21121","count__21122","i__21123","vec__21130","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__21133","cljs.core/next","k","v","tr","th","td","ns-th","components","cljs.core/name","anm","cljs.core/last","ans-component","ans","openscd.scl/tag-and-id","node","elm-id","js/module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$identity.identity","var_args","G__21138","openscd.scl/render-node","js/Error","data","openscd.scl.render_node","sibling-count","odd","old-or-new","span","details","summary","child-count","title","e","cljs.core/hash","p1__21136#","cljs.core/run!","cljs.core/not","cljs.core.array_seq","cljs.core.sort_by","openscd.scl/show-data","js/document.body","openscd.scl/render-attribute-diff","ours","theirs","ks","cljs.core/sorted-set","cljs.core/keys","seq__21139","chunk__21140","count__21141","i__21142","td-ours","td-arrow","td-theirs","v-ours","v-theirs","G__21150","openscd.scl/render-node-diff","openscd.scl.render_node_diff","p1__21143#","their-identified-nodes","cljs.core/group-by","our-identified-nodes","node-pairs","p1__21144#","cljs.core/vals","cljs.core.merge_with","cljs.core/concat","their-identities","our-identities","their-nodes","p1__21145#","clojure.set.difference","our-nodes","p1__21146#","p1__21147#","nodes","p1__21148#","node-or-pair","vec__21151","openscd.scl/show-diff","edn1","edn2","openscd.scl/sclDomDiff","dom1","dom2","openscd.scl/sclDomToEdn"],"sourcesContent":["(ns openscd.scl\n  (:require [\"@openenergytools/scl-lib/dist/tBaseElement/identity.js\" :rename\n             {identity id}]\n            [clojure.string :refer [blank? trim split replace]]\n            [clojure.data :refer [diff]]\n            [clojure.set :refer [difference]]))\n\n(defn after-next-paint [f] (js/requestAnimationFrame (fn [] (js/setTimeout f))))\n\n(def identifier-attributes\n  {:Association [:iedName :ldInst :prefix :lnClass :lnInst :lnType],\n   :ClientLN [:apRef :iedName :ldInst :prefix :lnClass :lnInst],\n   :ConnectedAP [:iedName :apName],\n   :DAI [:name :ix],\n   :ExtRef [:iedName :intAddr :ldInst :prefix :lnClass :lnInst :doName :daName\n            :serviceType :srcLDInst :srcPrefix :srcLNClass :srcLNInst\n            :srcCBName],\n   ; :FCDA [:ldInst :prefix :lnClass :lnInst :doName :daName :fc :ix],\n   :GSE [:ldInst :cbName],\n   :Hitem [:version :revision],\n   :IEDName [:apRef :ldInst :prefix :lnClass :lnInst],\n   :KDC [:iedName :apName],\n   :LDevice [:IED :inst],\n   :LN [:prefix :lnClass :inst],\n   :LN0 [:prefix :lnClass :inst],\n   :LNode [:iedName :ldInst :prefix :lnClass :lnInst :lnType],\n   :PhysConn [:type],\n   :SDI [:name :ix],\n   :SMV [:ldInst :cbName],\n   :Terminal [:connectivityNode]})\n\n(def schema-references\n  {:ServerAt [{:fields [{:to \"name\", :from \"apName\"}],\n               :to \":scope>AccessPoint\",\n               :from \":scope>AccessPoint>ServerAt\",\n               :scope \"IED\"}],\n   :LogControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>LogControl\",\n                 :scope \"LN\"}\n                {:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>LogControl\",\n                 :scope \"LN0\"}],\n   ;   :FCDA [{:fields [{:to \"inst\", :from \"ldInst\"}],\n   ;           :to \":scope>AccessPoint>Server>LDevice\", :from\n   ;           \":scope>AccessPoint>Server>LDevice>LN>DataSet>FCDA\",\n   ;           :scope \"IED\"}\n   ;          {:fields [{:to \"inst\", :from \"ldInst\"}],\n   ;           :to \":scope>AccessPoint>Server>LDevice\", :from\n   ;           \":scope>AccessPoint>Server>LDevice>LN0>DataSet>FCDA\",\n   ;           :scope \"IED\"}],\n   ; :ConnectedAP [{:fields [{:to \"name\", :from \"iedName\"}],\n   ;                :to \":scope>IED\", :from\n   ;                \":scope>Communication>SubNetwork>ConnectedAP\", :scope\n   ;                \"SCL\"}],\n   :DO [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DOType\",\n         :from \":scope>LNodeType>DO\",\n         :scope \"DataTypeTemplates\"}],\n   :SDO [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DOType\",\n          :from \":scope>DOType>SDO\",\n          :scope \"DataTypeTemplates\"}],\n   :BDA [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DAType, :scope>EnumType\",\n          :from \":scope>DOType>DA,\n          :scope>DAType>BDA\",\n          :scope \"DataTypeTemplates\"}],\n   ;   :Terminal [{:fields [{:to \"name\", :from \"substationName\"}],\n   ;               :to \":scope>Substation, :scope>Process,\n   ;               :scope>Line\", :from \":scope Terminal\", :scope\n   ;               \"SCL\"}],\n   ; :LN0 [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;        :to \":scope>DataTypeTemplates>LNodeType\",\n   ;        :from \":scope>IED>AccessPoint>Server>LDevice>LN0\",\n   ;        :scope \"SCL\"}],\n   :SampledValueControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                          :to \":scope>DataSet\",\n                          :from \":scope>SampledValueControl\",\n                          :scope \"LN0\"}],\n   :GSEControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>GSEControl\",\n                 :scope \"LN0\"}],\n   :DA [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DAType, :scope>EnumType\",\n         :from \":scope>DOType>DA, :scope>DAType>BDA\",\n         :scope \"DataTypeTemplates\"}],\n   :ReportControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                    :to \":scope>DataSet\",\n                    :from \":scope>ReportControl\",\n                    :scope \"LN\"}\n                   {:fields [{:to \"name\", :from \"datSet\"}],\n                    :to \":scope>DataSet\",\n                    :from \":scope>ReportControl\",\n                    :scope \"LN0\"}]\n   ; :LN [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\",\n   ;       :from \":scope>IED>AccessPoint>LN\",\n   ;       :scope \"SCL\"}\n   ;      {:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ;      \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\", :from\n   ;       \":scope>IED>AccessPoint>Server>LDevice>LN\",\n   ;       :scope \"SCL\"}]})\n  })\n\n(def defaults\n  {:AccessPoint {:clock \"false\", :desc \"\", :kdc \"false\", :router \"false\"},\n   :Association {:prefix \"\"},\n   :BDA {:count \"0\", :desc \"\", :valImport \"false\", :valKind \"Set\"},\n   :Bay {:desc \"\"},\n   :ClientLN {:prefix \"\"},\n   :ClientServices {:bufReport \"false\",\n                    :goose \"false\",\n                    :gsse \"false\",\n                    :noIctBinding \"false\",\n                    :rGOOSE \"false\",\n                    :rSV \"false\",\n                    :readLog \"false\",\n                    :supportsLdName \"false\",\n                    :sv \"false\",\n                    :unbufReport \"false\"},\n   :CommProt {:ipv6 \"false\"},\n   :Communication {:desc \"\"},\n   :ConductingEquipment {:desc \"\", :virtual \"false\"},\n   :ConfDataSet {:modify \"true\"},\n   :ConfLNs {:fixLnInst \"false\", :fixPrefix \"false\"},\n   :ConfReportControl {:bufConf \"false\", :bufMode \"both\"},\n   :ConnectedAP {:desc \"\"},\n   :ConnectivityNode {:desc \"\"},\n   :DA {:count \"0\",\n        :dchg \"false\",\n        :desc \"\",\n        :dupd \"false\",\n        :qchg \"false\",\n        :valImport \"false\",\n        :valKind \"Set\"},\n   :DAI {:desc \"\"},\n   :DAType {:desc \"\", :iedType \"\"},\n   :DO {:desc \"\", :transient \"false\"},\n   :DOI {:desc \"\"},\n   :DOType {:desc \"\", :iedType \"\"},\n   :DataSet {:desc \"\"},\n   :EnumType {:desc \"\"},\n   :EnumVal {:desc \"\"},\n   :EqFunction {:desc \"\"},\n   :EqSubFunction {:desc \"\"},\n   :FCDA {:prefix \"\"},\n   :FileHandling {:ftp \"false\", :ftps \"false\", :mms \"true\"},\n   :Function {:desc \"\"},\n   :GOOSE {:fixedOffs \"false\", :goose \"true\", :rGOOSE \"false\"},\n   :GOOSESecurity {:desc \"\"},\n   :GSE {:desc \"\"},\n   :GSEControl\n     {:desc \"\", :fixedOffs \"false\", :securityEnable \"None\", :type \"GOOSE\"},\n   :GSESettings {:appID \"Fix\",\n                 :cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :dataLabel \"Fix\",\n                 :kdaParticipant \"false\"},\n   :GeneralEquipment {:desc \"\", :virtual \"false\"},\n   :Header {:nameStructure \"IEDName\", :revision \"\"},\n   :IED {:desc \"\",\n         :engRight \"full\",\n         :originalSclRelease \"1\",\n         :originalSclRevision \"A\",\n         :originalSclVersion \"2003\"},\n   :Inputs {:desc \"\"},\n   :LDevice {:desc \"\"},\n   :LN {:desc \"\", :prefix \"\"},\n   :LNode {:desc \"\", :iedName \"None\", :ldInst \"\", :lnInst \"\", :prefix \"\"},\n   :LNodeType {:desc \"\", :iedType \"\"},\n   :Line {:desc \"\"},\n   :Log {:desc \"\"},\n   :LogControl {:bufTime \"0\",\n                :desc \"\",\n                :intgPd \"0\",\n                :lnClass \"LLN0\",\n                :logEna \"true\",\n                :prefix \"\",\n                :reasonCode \"true\"},\n   :LogSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :intgPd \"Fix\",\n                 :logEna \"Fix\",\n                 :trgOps \"Fix\"},\n   :McSecurity {:encryption \"false\", :signature \"false\"},\n   :NeutralPoint {:desc \"\", :name \"\"},\n   :PhysConn {:desc \"\"},\n   :PowerTransformer {:desc \"\", :virtual \"false\"},\n   :Process {:desc \"\"},\n   :ProtNs {:type \"8-MMS\"},\n   :RedProt {:hsr \"false\", :prp \"false\", :rstp \"false\"},\n   :ReportControl {:bufOvfl \"true\",\n                   :bufTime \"0\",\n                   :buffered \"false\",\n                   :configRef \"false\",\n                   :dataRef \"false\",\n                   :dataSet \"false\",\n                   :desc \"\",\n                   :entryID \"false\",\n                   :indexed \"true\",\n                   :intgPd \"0\",\n                   :reasonCode \"false\",\n                   :seqNum \"false\",\n                   :timeStamp \"false\"},\n   :ReportSettings {:bufTime \"Fix\",\n                    :cbName \"Fix\",\n                    :datSet \"Fix\",\n                    :intgPd \"Fix\",\n                    :optFields \"Fix\",\n                    :owner \"false\",\n                    :resvTms \"false\",\n                    :rptID \"Fix\",\n                    :trgOps \"Fix\"},\n   :RptEnabled {:desc \"\", :max \"1\"},\n   :SDI {:desc \"\"},\n   :SDO {:count \"0\", :desc \"\"},\n   :SMV {:desc \"\"},\n   :SMVSecurity {:desc \"\"},\n   :SMVSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :kdaParticipant \"false\",\n                 :nofASDU \"Fix\",\n                 :optFields \"Fix\",\n                 :pdcTimeStamp \"false\",\n                 :samplesPerSec \"false\",\n                 :smpRate \"Fix\",\n                 :svID \"Fix\",\n                 :synchSrcId \"false\"},\n   :SMVsc\n     {:delivery \"multicast\", :deliveryConf \"false\", :rSV \"false\", :sv \"true\"},\n   :SampledValueControl {:dataSet \"false\",\n                         :desc \"\",\n                         :multicast \"true\",\n                         :refreshTime \"false\",\n                         :sampleRate \"false\",\n                         :security \"false\",\n                         :securityEnable \"None\",\n                         :smpMod \"SmpPerPeriod\",\n                         :synchSourceId \"false\",\n                         :timestamp \"false\"},\n   :Server {:certificate \"false\",\n            :desc \"\",\n            :none \"true\",\n            :password \"false\",\n            :strong \"false\",\n            :timeout \"30\",\n            :weak \"false\"},\n   :ServerAt {:desc \"\"},\n   :Services {:nameLength \"32\"},\n   :SettingControl {:actSG \"1\", :desc \"\"},\n   :SettingGroups {:resvTms \"false\"},\n   :SubEquipment {:desc \"\", :phase \"none\", :virtual \"false\"},\n   :SubFunction {:desc \"\"},\n   :SubNetwork {:desc \"\"},\n   :Substation {:desc \"\"},\n   :TapChanger {:desc \"\", :virtual \"false\"},\n   :Terminal {:desc \"\", :name \"\"},\n   :TimeSyncProt\n     {:c37_238 \"false\", :iec61850_9_3 \"false\", :other \"false\", :sntp \"true\"},\n   :TransformerWinding {:desc \"\", :virtual \"false\"},\n   :TrgOps\n     {:dchg \"false\", :dupd \"false\", :gi \"true\", :period \"false\", :qchg \"false\"},\n   :ValueHandling {:setToRO \"false\"},\n   :Voltage {:multiplier \"\"},\n   :VoltageLevel {:desc \"\"}})\n\n(declare scl)\n(declare domToEdn)\n\n(defn with-defaults\n  [{:keys [attrs tag], :as element}]\n  (let [default-attrs (get defaults (keyword tag))]\n    (assoc element\n      :attrs (if default-attrs (merge default-attrs attrs) attrs))))\n\n(defn without-identifiers\n  [{:keys [attrs], :as element}]\n  (assoc element\n    :attrs (apply dissoc\n             attrs\n             :name\n             :id\n             (identifier-attributes (keyword (:tag element))))))\n\n(defn tos\n  [{:keys [fields to from scope]} elm]\n  (let [ancestor (.closest elm scope)]\n    (if (and ancestor (some #(= elm %) (vec (.querySelectorAll ancestor from))))\n      (let [referents (filter (fn [target]\n                                (every? (fn [{:keys [from to]}]\n                                          (= (.getAttribute target to)\n                                             (.getAttribute elm from)))\n                                        fields))\n                        (vec (.querySelectorAll ancestor to)))]\n        referents)\n      nil)))\n\n(defn with-schema-references\n  [{:keys [tag content], :as element}]\n  (let [refs (get schema-references (keyword tag))\n        referents (map domToEdn\n                    (filter (complement nil?)\n                      (flatten\n                        (map tos refs (repeat (::element (meta element)))))))]\n    (assoc element\n      :content (when (or content referents) (into content referents)))))\n\n(def fcda-references\n  (fn [{:keys [content],\n        {:keys [ldInst prefix lnClass lnInst doName daName]} :attrs,\n        ; TODO: add fc and ix\n        :as description}]\n    (let [element (::element (meta description))\n          SCL (.closest element \"SCL\")\n          IED (.closest element \"IED\")\n          selector (if (= lnClass \"LLN0\")\n                     (str \"LDevice[inst='\" ldInst \"'] LN0[inst='\" lnInst \"']\")\n                     (str \"LDevice[inst='\"\n                          ldInst\n                          \"'] LN[prefix='\"\n                          prefix\n                          \"'][inst='\"\n                          lnInst\n                          \"'][lnClass='\"\n                          lnClass\n                          \"']\"))\n          LN (.querySelector IED selector)\n          lnType (.getAttribute LN \"lnType\")\n          LNType (.querySelector\n                   SCL\n                   (str \"DataTypeTemplates LNodeType[id='\" lnType \"']\"))\n          do-name-segments (map #(replace % #\"\\\\(\\\\d+\\\\)\" \"\")\n                             (split doName #\"\\.\"))\n          DO (.querySelector LNType\n                             (str \"DO[name='\" (first do-name-segments) \"']\"))\n          DOType (.querySelector SCL\n                                 (str \"DataTypeTemplates DOType[id='\"\n                                      (.getAttribute DO \"type\")\n                                      \"']\"))\n          sdo-type (:sdo-type\n                     ((fn [{:keys [sdo-type names]}]\n                        (when-not (nil? sdo-type)\n                          (let [sdo (.querySelector\n                                      sdo-type\n                                      (str \"SDO[name='\" (first names) \"']\"))]\n                            (if (nil? sdo)\n                              {:sdo-type sdo-type, :names (rest names)}\n                              (recur {:sdo-type\n                                        (.querySelector\n                                          SCL\n                                          (str \"DataTypeTemplates DOType[id='\"\n                                               (.getAttribute sdo \"type\")\n                                               \"'] SDO\")),\n                                      :names (rest names)})))))\n                       {:sdo-type DOType, :names (rest do-name-segments)}))\n          da-name-segments (map #(replace % #\"\\\\(\\\\d+\\\\)\" \"\")\n                             (split daName #\"\\\\.\"))\n          DA (when sdo-type\n               (.querySelector sdo-type\n                               (str \"DA[name='\" (first da-name-segments) \"']\")))\n          ;_ (.log js/console (str da-name-segments) DA sdo-type)\n          DAType (when DA\n                   (.querySelector SCL\n                                   (str \"DataTypeTemplates DAType[id='\"\n                                        (.getAttribute DA \"type\")\n                                        \"']\")))\n          bda-type (:bda-type\n                     ((fn [{:keys [bda-type names]}]\n                        (when-not (nil? bda-type)\n                          (let [bda (.querySelector\n                                      bda-type\n                                      (str \"BDA[name='\" (first names) \"']\"))]\n                            (if (nil? bda)\n                              {:bda-type bda-type, :names (rest names)}\n                              (recur {:bda-type\n                                        (.querySelector\n                                          SCL\n                                          (str \"DataTypeTemplates DAType[id='\"\n                                               (.getAttribute bda \"type\")\n                                               \"'] BDA\")),\n                                      :names (rest names)})))))\n                       {:bda-type DAType, :names (rest da-name-segments)}))\n          child (first (filter identity\n                         [bda-type DAType sdo-type DOType LNType]))]\n      (if child\n        (assoc description :content (conj content (domToEdn child)))\n        description))))\n\n(def special-references {:FCDA fcda-references})\n\n(defn with-references\n  [element]\n  (if (contains? special-references (keyword (:tag element)))\n    ((get special-references (keyword (:tag element))) element)\n    (if (contains? schema-references (keyword (:tag element)))\n      (with-schema-references element)\n      element)))\n\n(defrecord Elm [^js/String tag ^PersistentTreeMap attrs\n                ^PersistentHashSet content])\n\n(def ^:export domToEdn\n  (memoize\n    (fn [dom]\n      (if dom\n        (condp = (.-nodeType dom)\n          3 (trim (.-textContent dom)) ; text\n          4 (.-data dom) ; CDATA\n          9 (recur (.-documentElement dom)) ; document\n          1 (when (not= (.-tagName dom) \"DataTypeTemplates\")\n              (-> ^{::element dom}\n                  {:tag (.-tagName dom),\n                   :attrs (apply sorted-map ; FIXME: Do we need to sort?\n                                 (mapcat (fn [a] [(keyword (.-name a))\n                                                  (.-value a)])\n                                   (.-attributes dom))),\n                   :content (set (filter #(not (or (nil? %) (blank? %)))\n                                   (map domToEdn (.-childNodes dom))))}\n                  with-defaults\n                  without-identifiers\n                  with-references)) ; element\n          nil)\n        nil))))\n\n(defn render-attributes\n  [attrs target]\n  (let [table (js/document.createElement \"table\")]\n    (doseq [[k v] attrs]\n      (let [tr (js/document.createElement \"tr\")\n            th (js/document.createElement \"th\")\n            td (js/document.createElement \"td\")\n            ns-th (js/document.createElement \"th\")\n            components (clojure.string/split (name k) #\":\" 2)\n            anm (last components)\n            ans-component (first components)\n            ans (if (= anm ans-component) \"\" ans-component)]\n        (set! (.-textContent ns-th) ans)\n        (set! (.-textContent th) anm)\n        (if (nil? v)\n          (set! (.-innerHTML td) \"<i>(missing)</i>\")\n          (if (blank? v)\n            (set! (.-innerHTML td) \"<i>(empty)</i>\")\n            (set! (.-textContent td) v)))\n        (.appendChild tr ns-th)\n        (.appendChild tr th)\n        (.appendChild tr td)\n        (.appendChild table tr)))\n    (.appendChild target table)))\n\n(defn tag-and-id\n  [node]\n  (if (and (:tag node) (::element (meta node)))\n    (let [elm-id (id (::element (meta node)))]\n      [(:tag node) (if (string? elm-id) elm-id nil)])\n    nil))\n\n(defn render-node\n  ([data target] (render-node data target 2))\n  ([data target sibling-count] (render-node data target sibling-count false))\n  ([data target sibling-count odd]\n   (render-node data target sibling-count odd nil))\n  ([data target sibling-count odd old-or-new]\n   (if (string? data)\n     (when (not (clojure.string/blank? data))\n       (let [span (js/document.createElement \"span\")]\n         (set! (.-textContent span) data)\n         (.append target span)))\n     (let [details (js/document.createElement \"details\")\n           summary (js/document.createElement \"summary\")\n           child-count (count (filter :tag (:content data)))\n           title (id (::element (meta data)))]\n       (when odd (set! (.-className details) \"odd\"))\n       (when old-or-new\n         (-> summary\n             .-classList\n             (.add (name old-or-new))))\n       (set! (.-textContent summary) (str (:tag data) \" \" title \" \"))\n       (.appendChild details summary)\n       (.appendChild target details)\n       (.addEventListener summary\n                          \"contextmenu\"\n                          (fn [e]\n                            (.preventDefault e)\n                            (.append summary (str \" \" (hash data)))\n                            (.preventDefault e)))\n       (.addEventListener summary\n                          \"mousedown\"\n                          (fn [e]\n                            (when (= (.-button e) 1)\n                              (.preventDefault e)\n                              (run! #(when (= (.-tagName %) \"DETAILS\")\n                                       (set! (.-open %) (not (.-open %))))\n                                    (array-seq (.-children details))))))\n       (.addEventListener\n         details\n         \"toggle\"\n         (fn []\n           (when (and (.-open details)\n                      (-> details\n                          .-classList\n                          (.contains \"rendered\")\n                          not))\n             (-> details\n                 .-classList\n                 (.add \"rendered\"))\n             (render-attributes (:attrs data) details)\n             (let [span (js/document.createElement \"span\")]\n               (set! (.-textContent span) \"Loading...\")\n               (.appendChild details span)\n               (after-next-paint\n                 (fn []\n                   (run! (fn [node]\n                           (render-node node details child-count (not odd)))\n                         (sort-by tag-and-id (:content data)))\n                   (.removeChild details span)))))))\n       (when (< sibling-count 2) (set! (.-open details) true))))))\n\n(defn show-data [data] (render-node data js/document.body) data)\n\n(defn render-attribute-diff\n  [ours theirs target]\n  (when-not (= ours theirs)\n    (let [table (js/document.createElement \"table\")\n          ks (apply sorted-set (into (keys theirs) (keys ours)))]\n      (doseq [k ks]\n        (let [tr (js/document.createElement \"tr\")\n              th (js/document.createElement \"th\")\n              td-ours (js/document.createElement \"td\")\n              td-arrow (js/document.createElement \"td\")\n              td-theirs (js/document.createElement \"td\")\n              ns-th (js/document.createElement \"th\")\n              components (clojure.string/split (name k) #\":\" 2)\n              anm (last components)\n              ans-component (first components)\n              ans (if (= anm ans-component) \"\" ans-component)\n              v-ours (ours k)\n              v-theirs (theirs k)]\n          (when-not (= v-ours v-theirs)\n            (set! (.-textContent ns-th) ans)\n            (set! (.-textContent th) anm)\n            (if (nil? v-ours)\n              (set! (.-innerHTML td-ours) \"<i>(missing)</i>\")\n              (if (blank? v-ours)\n                (set! (.-innerHTML td-ours) \"<i>(empty)</i>\")\n                (set! (.-textContent td-ours) v-ours)))\n            (-> td-arrow\n                .-classList\n                (.add \"arrow\"))\n            (set! (.-textContent td-arrow) \"->\")\n            (if (nil? v-theirs)\n              (set! (.-innerHTML td-theirs) \"<i>(missing)</i>\")\n              (if (blank? v-theirs)\n                (set! (.-innerHTML td-theirs) \"<i>(empty)</i>\")\n                (set! (.-textContent td-theirs) v-theirs)))\n            (.appendChild tr ns-th)\n            (.appendChild tr th)\n            (.appendChild tr td-ours)\n            (.appendChild tr td-arrow)\n            (.appendChild tr td-theirs)\n            (.appendChild table tr))))\n      (.appendChild target table))))\n\n(defn render-node-diff\n  ([ours theirs target] (render-node-diff ours theirs target 2))\n  ([ours theirs target sibling-count]\n   (render-node-diff ours theirs target sibling-count false))\n  ([ours theirs target sibling-count odd]\n   (when-not (= ours theirs)\n     (if (nil? theirs)\n       (render-node ours target sibling-count odd :old)\n       (if (nil? ours)\n         (render-node theirs target sibling-count odd :new)\n         (if (string? ours)\n           (when-not (and (blank? ours) (blank? theirs))\n             (let [span (js/document.createElement \"span\")]\n               (set! (.-textContent span) (str ours \" -> \" theirs))\n               (.append target span)))\n           (let [details (js/document.createElement \"details\")\n                 summary (js/document.createElement \"summary\")\n                 title (id (or (::element (meta ours))\n                               (::element (meta theirs))))]\n             (when odd (set! (.-className details) \"odd\"))\n             (-> details\n                 .-classList\n                 (.add \"diff\"))\n             (set! (.-textContent summary) (str (:tag ours) \" \" title \" \"))\n             (.appendChild details summary)\n             (.appendChild target details)\n             (.addEventListener\n               summary\n               \"contextmenu\"\n               (fn [e]\n                 (.append summary (str \" \" (hash ours) \" -> \" (hash theirs)))\n                 (.preventDefault e)))\n             (.addEventListener summary\n                                \"auxclick\"\n                                (fn [e]\n                                  (when (= (.-button e) 1)\n                                    (.preventDefault e)\n                                    (run! #(when (= (.-tagName %) \"DETAILS\")\n                                             (set! (.-open %) (not (.-open %))))\n                                          (array-seq (.-children details))))))\n             (.addEventListener\n               details\n               \"toggle\"\n               (fn []\n                 (when (and (.-open details)\n                            (-> details\n                                .-classList\n                                (.contains \"rendered\")\n                                not))\n                   (-> details\n                       .-classList\n                       (.add \"rendered\"))\n                   (render-attribute-diff (:attrs ours) (:attrs theirs) details)\n                   (let [span (js/document.createElement \"span\")]\n                     (set! (.-textContent span) \"Loading...\")\n                     (.appendChild details span)\n                     (after-next-paint\n                       (fn []\n                         (let [their-identified-nodes\n                                 (group-by tag-and-id (:content theirs))\n                               our-identified-nodes (group-by tag-and-id\n                                                              (:content ours))\n                               node-pairs (filter #(= (count %) 2)\n                                            (vals (merge-with\n                                                    concat\n                                                    their-identified-nodes\n                                                    our-identified-nodes)))\n                               their-identities (set (keys\n                                                       their-identified-nodes))\n                               our-identities (set (keys our-identified-nodes))\n                               their-nodes\n                                 (map #(first (their-identified-nodes %))\n                                   (difference their-identities our-identities))\n                               our-nodes (map #(first (our-identified-nodes %))\n                                           (difference our-identities\n                                                       their-identities))\n                               child-count (+ (count (filter #(:tag (first %))\n                                                       node-pairs))\n                                              (count their-nodes)\n                                              (count our-nodes))\n                               nodes\n                                 (sort-by\n                                   #(or (tag-and-id %) (tag-and-id (first %)))\n                                   (concat node-pairs their-nodes our-nodes))]\n                           (run! (fn [node-or-pair]\n                                   (if (:tag node-or-pair)\n                                     (render-node node-or-pair\n                                                  details\n                                                  child-count\n                                                  (not odd)\n                                                  :new)\n                                     (let [[ours theirs] node-or-pair]\n                                       (render-node-diff ours\n                                                         theirs\n                                                         details\n                                                         child-count\n                                                         (not odd)))))\n                                 nodes)\n                           (.removeChild details span))))))))\n             (when (< sibling-count 2) (set! (.-open details) true)))))))))\n\n(defn show-diff\n  [edn1 edn2 target]\n  (when-not (= edn1 edn2) (render-node-diff edn1 edn2 target)))\n\n(defn ^:export sclDomDiff\n  [dom1 dom2 target]\n  (let [edn1 (domToEdn dom1)\n        edn2 (domToEdn dom2)]\n    (show-diff edn1 edn2 target)))\n\n(defn ^:export sclDomToEdn\n  [dom]\n  (-> dom\n      domToEdn\n      show-data))\n"]}