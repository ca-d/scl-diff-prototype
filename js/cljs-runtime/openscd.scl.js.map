{"version":3,"sources":["openscd/scl.cljc"],"mappings":";;;;;;;;;AAQA,+BAAA,/BAAMA,sEAAkBC;AAAxB,AAA2B,OAACC,sBAAyB;AAAA,AAAO,OAACC,WAAcF;;;AAE3E,yBAAA,2CAAA,4DAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,OAAA,qDAAA,yBAAA,gDAAA,qBAAA,qDAAA,8BAAA,uDAAA,sBAAA,gDAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,KAAA,qDAAA,uBAAA,gDAAA,gBAAA,qDAAA,sBAAA,uDAAA,oCAAA,mDAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,KAAA,qDAAA,uBAAA,gDAAA,gBAAA,qDAAA,oBAAA,uDAAA,oCAAA,mDAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,KAAA,qDAAA,uBAAA,gDAAA,iCAAA,qDAAA,iDAAA,uDAAA,oCAAA,iEAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,OAAA,qDAAA,yBAAA,gDAAA,iBAAA,qDAAA,oBAAA,uDAAA,sBAAA,gDAAA,mFAAA,2CAAA,0DAAA,mFAAA,2CAAA,gDAAA,KAAA,qDAAA,uBAAA,gDAAA,iCAAA,qDAAA,sCAAA,uDAAA,p1IAAKG;AA+EL,uBAAA,wCAAA,iEAAA,oDAAA,mEAAA,kDAAA,sEAAA,6DAAA,iEAAA,sDAAA,4DAAA,yDAAA,yDAAA,iEAAA,sEAAA,0DAAA,mEAAA,qDAAA,oEAAA,yDAAA,+EAAA,gDAAA,uDAAA,0EAAA,oDAAA,2DAAA,sEAAA,2DAAA,mDAAA,iEAAA,2EAAA,mDAAA,8DAAA,mDAAA,wEAAA,yEAAA,qDAAA,kDAAA,kEAAA,mEAAA,mEAAA,yEAAA,2DAAA,oDAAA,8DAAA,kEAAA,yDAAA,yDAAA,qEAAA,oFAAA,kFAAA,oDAAA,qEAAA,wDAAA,wEAAA,kEAAA,iEAAA,4EAAA,4DAAA,mEAAA,0DAAA,kDAAA,uEAAA,wEAAA,gDAAA,iFAAA,2DAAA,kEAAA,mEAAA,8EAAA,6DAAA,6DAAA,qEAAA,mEAAA,2DAAA,yDAAA,2DAAA,uEAAA,6DAAA,gEAAA,kDAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,0DAAA,eAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,uDAAA,QAAA,qDAAA,GAAA,oDAAA,QAAA,yDAAA,gBAAA,2CAAA,qDAAA,GAAA,0DAAA,OAAA,yDAAA,GAAA,yDAAA,GAAA,yDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,0DAAA,WAAA,2CAAA,yDAAA,IAAA,qDAAA,GAAA,uDAAA,IAAA,4DAAA,OAAA,yDAAA,OAAA,yDAAA,GAAA,gEAAA,eAAA,2CAAA,qDAAA,GAAA,sDAAA,OAAA,4DAAA,gBAAA,2CAAA,oEAAA,QAAA,qDAAA,GAAA,qDAAA,OAAA,4DAAA,QAAA,wDAAA,QAAA,2DAAA,KAAA,qDAAA,gBAAA,wCAAA,0DAAA,kEAAA,sEAAA,0DAAA,0EAAA,gEAAA,0DAAA,qDAAA,qEAAA,6DAAA,MAAA,QAAA,QAAA,MAAA,QAAA,MAAA,MAAA,MAAA,QAAA,QAAA,2CAAA,yDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,uEAAA,UAAA,8DAAA,WAAA,2CAAA,4DAAA,QAAA,0DAAA,eAAA,2CAAA,qDAAA,GAAA,+DAAA,gBAAA,2CAAA,8DAAA,YAAA,qEAAA,QAAA,mDAAA,QAAA,iDAAA,eAAA,wCAAA,0DAAA,yDAAA,uDAAA,yDAAA,wDAAA,gEAAA,0DAAA,2DAAA,yDAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,QAAA,UAAA,2CAAA,qDAAA,GAAA,8DAAA,OAAA,kFAAA,IAAA,mFAAA,IAAA,kFAAA,eAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,+DAAA,QAAA,+DAAA,gBAAA,2CAAA,uDAAA,IAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,4DAAA,gBAAA,2CAAA,uDAAA,IAAA,qDAAA,GAAA,4DAAA,QAAA,2DAAA,cAAA,2CAAA,qDAAA,GAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,2DAAA,gBAAA,wCAAA,mDAAA,0EAAA,oEAAA,4DAAA,qDAAA,8DAAA,oEAAA,iDAAA,wDAAA,yDAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,UAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,gEAAA,QAAA,+DAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,0DAAA,MAAA,0DAAA,MAAA,uDAAA,MAAA,yDAAA,MAAA,yDAAA,cAAA,2CAAA,uDAAA,IAAA,qDAAA,WAAA,2CAAA,mDAAA,QAAA,mDAAA,QAAA,qDAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,4DAAA,gBAAA,2CAAA,qDAAA,GAAA,0DAAA,WAAA,2CAAA,qDAAA,QAAA,sDAAA,QAAA,gDAAA,OAAA,yDAAA,QAAA,sDAAA,gBAAA,2CAAA,2DAAA,QAAA,oEAAA,QAAA,sDAAA,QAAA,qDAAA,eAAA,wCAAA,mEAAA,0DAAA,yDAAA,8DAAA,qDAAA,4DAAA,iEAAA,uEAAA,8DAAA,4EAAA,QAAA,QAAA,eAAA,OAAA,GAAA,QAAA,QAAA,QAAA,QAAA,SAAA,2CAAA,qDAAA,GAAA,4DAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,kDAAA,QAAA,qDAAA,QAAA,mDAAA,eAAA,2CAAA,gEAAA,QAAA,uDAAA,OAAA,wDAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,gEAAA,QAAA,0EAAA,OAAA,qDAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,iEAAA,aAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,2DAAA,gBAAA,2CAAA,uDAAA,IAAA,qDAAA,QAAA,qDAAA,GAAA,sDAAA,QAAA,sDAAA,QAAA,4DAAA,QAAA,2DAAA,cAAA,2CAAA,qDAAA,GAAA,4DAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,GAAA,iDAAA,YAAA,2CAAA,uDAAA,MAAA,0DAAA,MAAA,0DAAA,MAAA,+DAAA,MAAA,0EAAA,gBAAA,2CAAA,qDAAA,GAAA,4DAAA,gBAAA,2CAAA,qDAAA,gBAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,yDAAA,WAAA,2CAAA,qDAAA,WAAA,2CAAA,qDAAA,gBAAA,2CAAA,kEAAA,WAAA,wCAAA,0DAAA,0DAAA,8DAAA,qDAAA,yDAAA,4DAAA,uDAAA,4DAAA,gEAAA,0DAAA,+DAAA,0DAAA,gEAAA,OAAA,QAAA,QAAA,GAAA,IAAA,OAAA,IAAA,QAAA,QAAA,QAAA,QAAA,QAAA,UAAA,2CAAA,yDAAA,WAAA,2CAAA,qDAAA,GAAA,0DAAA,WAAA,2CAAA,qDAAA,GAAA,yDAAA,/jrBAAKC;AAkKL,AAAA,AACA,AAAA,AAEA,4BAAA,oCAAAC,hEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAC2BM;YAD3B,AAAAJ,4CAAAF,eAAA,nEACWI;UADX,AAAAF,4CAAAF,eAAA,jEACiBK;AADjB,AAEE,IAAME,gBAAc,AAACL,4CAAIJ,qBAAS,AAACU,gDAAQH;AAA3C,AACE,6DAAA,tDAACI,8CAAMH,gEACE,kBAAIC,eAAc,AAACG,uGAAMH,cAAcH,YAAOA;;AAE3D,kBAAA,0BAAAO,5CAAME,qDAC4BK;AADlC,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;aAAA,AAAAV,4CAAAU,eAAA,pEACWE;SADX,AAAAZ,4CAAAU,eAAA,hEACkBG;WADlB,AAAAb,4CAAAU,eAAA,lEACqBI;YADrB,AAAAd,4CAAAU,eAAA,nEAC0BK;AAD1B,AAEE,IAAME,WAAS,AAAUD,YAAID;AAA7B,AACE,oBAAI,iBAAAG,oBAAKD;AAAL,AAAA,oBAAAC;AAAc,sBAAA,WAAAC,1BAACC;AAAD,AAAO,wDAAAD,jDAACE,6CAAEL;GAAO,AAACM,cAAI,AAAmBL,0BAASH;;AAAhEI;;;AACF,IAAMK,YAAU,AAACC,+CAAO,WAAKC;AAAL,AACE,OAACC,uBAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA7B,4BAAA6B;eAAA,AAAA5B,4CAAA4B,eAAA,tEAAad;aAAb,AAAAd,4CAAA4B,eAAA,pEAAkBf;AAAlB,AACE,OAACQ,6CAAE,AAAeI,oBAAOZ,QACtB,AAAeG,iBAAIF;GACxBF;GAChB,AAACU,cAAI,AAAmBL,0BAASJ;AALnD,AAMEU;;AAPJ;;;AAUJ,8BAAA,sCAAAM,pEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/B,4BAAA+B;cAAAA,VAC6B1B;UAD7B,AAAAJ,4CAAA8B,eAAA,jEACW3B;cADX,AAAAH,4CAAA8B,eAAA,rEACeE;AADf,AAEE,IAAMC,OAAK,AAACjC,4CAAIL,uBAAW,AAACW,gDAAQH;IAC9BoB,YAAU,AAACW,4CAAIC,qBACH,AAACX,+CAAO,AAACY,qBAAWC,sBAClB,AAACC,kBACC,AAACJ,4CAAIvB,gBAAIsB,KAAK,AAACM,+CAAO,AAAA,8GAAW,AAACC,eAAKpC;AAJ7D,AAKE,6DAAA,tDAACG,8CAAMH,iEACI,kBAAI,iBAAAqC,mBAAIT;AAAJ,AAAA,oBAAAS;AAAAA;;AAAYlB;;sEAAhB,hEAA2B,AAACmB,6CAAKV,QAAQT;;AAExD,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,8DAAA,WAAAoB,mBAAAC,5FAAW+D;;AAAX,AAAA,IAAAhE,yBAAA;AAAA,AAAA,OAAAA,+DAAAC,gBAAA;;;AAAA,CAAA,AAAA,8DAAA,WAAAC,mBAAAC,OAAAC,nGAAW4D;;AAAX,AAAA,IAAA9D,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA7C;;;KAAA;AAAAD;;;KAAA;AAAA8B;;;;AAAA,OAAAhC,4CAAAkD,gBAAAJ,OAAAC;;;;;AAAA,CAAA,AAAA,mEAAA,WAAAI,mBAAAC,gBAAAC,jHAAWsD;;AAAX,AAAA,IAAAxD,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,2BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,0EAAA,WAAAU,mBAAAC,qBAAAC,7HAAW4C;;AAAX,AAAA,IAAA9C,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,oBAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,oDAAAjE,YAAA,OAAA,KAAAiE,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,wDAAAlE,cAAA,OAAA,KAAAkE,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,yDAAApC,gBAAA,eAAAkB;;;AAAA,CAAA,AAAA,kEAAA,WAAAmB,7EAAWsC;;AAAX,AAAA,IAAAtC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,oDAAA,wDAAA,iEAAA,kBAAAnB,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,0DAAA,WAAAC,rEAAWkC;;AAAX,AAAA,IAAAlC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,gEAAA,WAAAC,3EAAWgC;;AAAX,AAAA,IAAAhC,yBAAA;AAAA,AAAA,4BAAAxE,WAAAD,aAAA8B,eAAA0C,cAAAxB,gBAAA0B,rFAAW+B;;;AAAX,CAAA,AAAA,8DAAA,WAAA9B,zEAAW8B;;AAAX,AAAA,IAAA9B,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,0DAAA,WAAA6B,rEAAW4B;;AAAX,AAAA,IAAA5B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,cAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,4DAAA,WAAAG,UAAAC,jFAAWuB;;AAAX,AAAA,IAAAxB,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAA/D,6CAAA,AAAA8D,kBAAA,AAAAC,qBAAA,EAAA,AAAA/D,6CAAA,AAAA8D,oBAAA,AAAAC,uBAAA,EAAA,AAAA/D,6CAAA,AAAA8D,sBAAA,AAAAC,yBAAA,AAAA/D,6CAAA,AAAA8D,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,2DAAA,WAAAC,mBAAAC,zFAAWqB;;AAAX,AAAA,IAAAtB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,8DAAA,6DAAA,wEAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAA/C,6CAAA,mCAAA2C,wBAAAX,eAAAY;;AAAA,4BAAAnF,WAAAD,aAAA8B,eAAA0C,cAAA,AAAAgB,oBAAA,AAAAF,+CAAAtC,gBAAAoC,kBAAA,1KAAWqB;;;;AAAX,CAAA,AAAA,gFAAA,WAAAhB,mBAAA7C,9GAAW6D;;AAAX,AAAA,IAAAhB,yBAAA;AAAA,AAAA,IAAAC,WAAA9C;IAAA8C,eAAA,EAAA,CAAAA,oBAAA3C,oBAAA,AAAA2C,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;KAAA;AAAA;;;;AAAA,OAAAL,0BAAArC,gBAAAJ;;;;;AAAA,CAAA,AAAA,kEAAA,WAAA+C,mBAAAC,gBAAAzB,hHAAWsC;;AAAX,AAAA,IAAAd,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,oDAAAE,eAAAF,uBAAA,oDAAAE;AAAA,4BAAA5B,SAAAnE,aAAA8B,eAAA0C,cAAAxB,gBAAA,nFAAWyD;;AAAX,oBAAA,CAAAZ,4CAAAA,0CAAA,wDAAAE,eAAAF,uBAAA,wDAAAE;AAAA,4BAAA9F,WAAAkE,SAAArC,eAAA0C,cAAAxB,gBAAA,jFAAWyD;;AAAX,oBAAA,CAAAZ,4CAAAA,0CAAA,yDAAAE,eAAAF,uBAAA,yDAAAE;AAAA,4BAAA9F,WAAAD,aAAAmE,SAAAK,cAAAxB,gBAAA,/EAAWyD;;AAAX,4BAAAxG,WAAAD,aAAA8B,eAAA0C,cAAA,AAAAnE,8CAAA2C,gBAAA4C,gBAAAzB,UAAA,7JAAWsC;;;;;;AAAX,CAAA,AAAA,4DAAA,WAAAT,vEAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAhC,+CAAA,mFAAA,KAAAiC,mBAAA,oDAAAjG,WAAA,OAAA,KAAAiG,mBAAA,wDAAAlG,aAAA,OAAA,KAAAkG,mBAAA,yDAAApE,eAAA,eAAAkB;;;AAAA,CAAA,AAAA,mEAAA,WAAAmD,mBAAAhC,jGAAWsC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,4BAAAlG,WAAAD,aAAA8B,eAAAqC,SAAAnB,gBAAA0B,hFAAW+B;;;AAAX,CAAA,AAAA,gEAAA,WAAAL,mBAAAC,9FAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,mEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAAjD,+CAAAoD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,2BAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,iCAAA;;AAAA,CAAA,AAAAA,sCAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,kBAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,yCAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;uBAAA,vBAAWM,sDAAgBjH,IAAuBD,MACf8B;AADnC,AAAA,YAAA2E,kCAAA,KAAA,KAAA,5BAA2BxG,IAAuBD,MACf8B;;;AADnC;;;0BAAA,kCAAAgF,5DAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA1B,sDAAAwB,SAAA,sGAAA,wDAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAtE,6CAAA,mCAAAwE;;AAAAA;;;AAAA,AAAA,YAAAP,gBAAA,AAAA,kFAAAK,UAAA,AAAA,sFAAAA,UAAA,AAAA,uFAAAA,UAAA,KAAA,AAAAtB,oBAAAuB,sBAAA;;;AAAAN,AAGA,AAAcxE,uBACZ,AAACmF,kBACC,WAAKC;;AAAL,AACE,IAAAC,cAAOE;IAAPD,cAAS,AAAYF;AAArB,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,uBAAA,IAAAC;AACI,OAAeF;;AADnB,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,uBAAA,IAAAC;AAEI,eAAO,AAAmBF;;;;AAF9B,oBAAA,CAAAC,4CAAAA,0CAAA,IAAAC,eAAAD,uBAAA,IAAAC;AAGI,GAAM,4DAAA,5DAACE,gDAAK,AAAWJ;AAAvB,AACE,mCAAA,0BAAI,KAAAZ,gBAAM,AAAWY,YACX,AAACK,8CAAMC,qBACL,AAACC,sDAAO,pLAMhB7H,5BACA8B;kBAPqBgG;AAAL,AAAA,0FAAS,AAACzH,gDAAQ,AAAQyH,QAAI,AAASA;;oQAFvD,2CAAA,4FAAA,KAAA,KAAA,KAAA,vWAGU,AAAcR,sBAClB,AAACS,cAAI,AAACxG,+CAAO,AAACY,qBAAWC,sBAClB,AAACH,4CAAIC,qBAAS,AAAcoF,6IACxBA;;AAPvB;;;AAHJ;;;;;;;;AAgBN,gCAAA,hCAAMU,wEACH/H,MAAMuB;AADT,AAEE,IAAMyG,QAAM,uBAAA,vBAACC;AAAb,AACE,IAAAC,mBAAA,AAAAjC,cAAcjG;IAAdmI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,yDAAAE;cAAA,AAAA5E,4CAAA6E,iBAAA,IAAA,3EAASS;cAAT,AAAAtF,4CAAA6E,iBAAA,IAAA,3EAAWU;AAAX,AAAA,AACE,IAAMC,WAAG,uBAAA,vBAAChB;IACJiB,WAAG,uBAAA,vBAACjB;IACJkB,WAAG,uBAAA,vBAAClB;IACJmB,cAAM,uBAAA,vBAACnB;IACPoB,mBAAW,2EAAA,IAAA,/EAACC,mDAAqB,AAACC,eAAKR;IACvCS,YAAI,AAACC,eAAKJ;IACVK,sBAAc,AAACb,gBAAMQ;IACrBM,YAAI,+EAAA,7EAAI,AAACxI,6CAAEqI,UAAIE,yBAAkBA;AAPvC,AAQE,CAAM,AAAeN,0BAAOO;;AAC5B,CAAM,AAAeT,uBAAIM;;AACzB,GAAI,YAAA,XAAMR;AACR,sBAAA,rBAAM,AAAaG;;AACnB,GAAI,AAACS,4BAAOZ;AACV,sBAAA,rBAAM,AAAaG;;AACnB,CAAM,AAAeA,uBAAIH;;;;AAC7B,AAAcC,qBAAGG;;AACjB,AAAcH,qBAAGC;;AACjB,AAAcD,qBAAGE;;AACjB,AAAcnB,kBAAMiB;;AAnBxB;AAAA,eAAAf;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAE,2BAAA,AAAAtC,cAAAiC;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAA7D,gBAAA6D;eAAA;;;;;;;AAAA,IAAAG,mBAAA,AAAAC,gBAAAX;cAAA,AAAAzE,4CAAAmF,iBAAA,IAAA,3EAASG;cAAT,AAAAtF,4CAAAmF,iBAAA,IAAA,3EAAWI;AAAX,AAAA,AACE,IAAMC,WAAG,uBAAA,vBAAChB;IACJiB,WAAG,uBAAA,vBAACjB;IACJkB,WAAG,uBAAA,vBAAClB;IACJmB,cAAM,uBAAA,vBAACnB;IACPoB,mBAAW,2EAAA,IAAA,/EAACC,mDAAqB,AAACC,eAAKR;IACvCS,YAAI,AAACC,eAAKJ;IACVK,sBAAc,AAACb,gBAAMQ;IACrBM,YAAI,+EAAA,7EAAI,AAACxI,6CAAEqI,UAAIE,yBAAkBA;AAPvC,AAQE,CAAM,AAAeN,0BAAOO;;AAC5B,CAAM,AAAeT,uBAAIM;;AACzB,GAAI,YAAA,XAAMR;AACR,sBAAA,rBAAM,AAAaG;;AACnB,GAAI,AAACS,4BAAOZ;AACV,sBAAA,rBAAM,AAAaG;;AACnB,CAAM,AAAeA,uBAAIH;;;;AAC7B,AAAcC,qBAAGG;;AACjB,AAAcH,qBAAGC;;AACjB,AAAcD,qBAAGE;;AACjB,AAAcnB,kBAAMiB;;AAnBxB;AAAA,eAAA,AAAAH,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAoBA,OAAc3G,mBAAOyG;;AAEzB,yBAAA,zBAAM6B,0DACHC;AADH,AAEE,oBAAI,iBAAA9I,oBAAK,AAAA,kFAAM8I;AAAX,AAAA,oBAAA9I;AAAiB,OAAA,8GAAW,AAACsB,eAAKwH;;AAAlC9I;;;AACF,IAAM+I,SAAO,AAACC,iFAAG,AAAA,8GAAW,AAAC1H,eAAKwH;AAAlC,AAAA,0FACG,AAAA,kFAAMA,MAAM,qCAAA,nCAAI,OAASC,qBAAQA;;AAFtC;;;AAKF,AAAA,0BAAA,kCAAAE,5DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMD,mEACFE,KAAK9I;AADT,AACiB,yEAAA,lEAAC+I,sDAAYD,KAAK9I;;;AADnC,CAAA,wDAAA,xDAAM4I,mEAEFE,KAAK9I,OAAOgJ;AAFhB,AAE+B,uFAAA,hFAACD,sDAAYD,KAAK9I,OAAOgJ;;;AAFxD,CAAA,wDAAA,xDAAMJ,mEAGFE,KAAK9I,OAAOgJ,cAAcC;AAH9B,AAIG,2FAAA,pFAACF,sDAAYD,KAAK9I,OAAOgJ,cAAcC;;;AAJ1C,CAAA,wDAAA,xDAAML,mEAKFE,KAAK9I,OAAOgJ,cAAcC,IAAIC;AALlC,AAMG,GAAI,OAASJ;AACX,GAAM,GAAK,AAACT,4BAAsBS;AAAlC,AACE,IAAMK,OAAK,uBAAA,vBAACzC;AAAZ,AACE,CAAM,AAAeyC,mBAAML;;AAC3B,OAAS9I,cAAOmJ;;AAHpB;;;AAIA,IAAMC,UAAQ,uBAAA,vBAAC1C;IACT2C,UAAQ,uBAAA,vBAAC3C;IACT4C,cAAY,AAACjG,gBAAM,+CAAA,/CAACtD,mGAAY,AAAA,uFAAU+I;IAC1CS,QAAM,AAACd,iFAAG,AAAA,8GAAW,AAAC1H,eAAK+H;AAHjC,AAIE,oBAAMG;AAAN,AAAU,qBAAA,pBAAM,AAAaG;;AAA7B;;AACA,oBAAMF;AAAN,AACMG,AAEA,AAAA,sBAAM,AAACrB,eAAKkB;;AAHlB;;AAIA,CAAM,AAAeG,sBAAS,sIAAA,uDAAA,hJAAK,AAAA,kFAAMP,uDAAUS;;AACnD,AAAcH,oBAAQC;;AACtB,AAAcrJ,mBAAOoJ;;AACrB,yBAAA,zBACEC,uCAEA,WAAKG;AAAL,AAAQ,AAASH,eAAQ,CAAA,gDAAS,AAACI,eAAKX;;AAAQ,OAAiBU;;;AACnE,yBAAA,zBAAmBH,qCAEA,WAAKG;AAAL,AACE,GAAM,sDAAA,tDAAC5J,6CAAE,AAAU4J;AAAnB,AACE,AAAiBA;;AACjB,2BAAA,WAAAE,/BAACC;AAAD,AAAO,GAAM,sEAAA,tEAAC/J,6CAAE,AAAA8J;AAAT,AACE,QAAM,AAAAA,wBAAW,AAACE,cAAI,AAAAF;;AADxB;;GAED,AAACG,kDAAU,AAAYT;;AAJ/B;;;;AAKrB,yBAAA,zBACEA,kCAEA,WAAKI;AAAL,AACE,oBAAM,iBAAA/J,oBAAK,AAAQ2J;AAAb,AAAA,oBAAA3J;AACK,qBAAI2J,AAEA,AAAA,2BAAA,zCACAQ;;AAJTnK;;;AAAN,AAKM2J,AAEA,AAAA,sBAAA;;AACJ,AAAC5C,8BAAkB,AAAA,sFAAQsC,MAAMM;;AACjC,IAAMD,OAAK,uBAAA,vBAACzC;AAAZ,AACE,oBAAA,nBAAM,AAAeyC;;AACrB,AAAcC,oBAAQD;;AACtB,OAACrL,6BACC;AAAA,AACE,AAAI,AAAC6L,oBAAK,WAAKpB;AAAL,AACE,OAACQ,sDAAYR,KAAKa,QAAQE,YAAY,AAACM,cAAIX;GAC7C,AAACa,gDAAQxB,uBAAW,AAAA,uFAAUQ;;AACpC,OAAcM,oBAAQD;;;AAjBlC;;;;AAkBJ,GAAM,iBAAA,hBAAGH;AAAT,AAA0B,uBAAA,fAAM,AAAQI;;AAAxC;;;;;AAzDP,CAAA,kDAAA,lDAAMR;;AAAN,AA2DA,wBAAA,xBAAMmB,wDAAWjB;AAAjB,AAAuB,AAACC,sDAAYD,KAAKkB;;AAAkBlB;;AAE3D,oCAAA,pCAAMmB,gFACHC,KAAKC,OAAOnK;AADf,AAEE,GAAU,AAACJ,6CAAEsK,KAAKC;AAAlB;;AAAA,AACE,IAAM1D,QAAM,uBAAA,vBAACC;IACP0D,KAAG,AAACjE,8CAAMkE,qBAAW,AAACpJ,6CAAK,AAACqJ,eAAKH,QAAQ,AAACG,eAAKJ;AADrD,AAEE,IAAAK,mBAAA,AAAA7F,cAAU0F;IAAVI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,cAAA,AAAAD,yDAAAE,nEAAQlD;AAAR,AAAA,AACE,IAAME,WAAG,uBAAA,vBAAChB;IACJiB,WAAG,uBAAA,vBAACjB;IACJiE,gBAAQ,uBAAA,vBAACjE;IACTkE,iBAAS,uBAAA,vBAAClE;IACVmE,kBAAU,uBAAA,vBAACnE;IACXmB,cAAM,uBAAA,vBAACnB;IACPoB,mBAAW,2EAAA,IAAA,/EAACC,mDAAqB,AAACC,eAAKR;IACvCS,YAAI,AAACC,eAAKJ;IACVK,sBAAc,AAACb,gBAAMQ;IACrBM,YAAI,+EAAA,7EAAI,AAACxI,6CAAEqI,UAAIE,yBAAkBA;IACjC2C,eAAO,CAACZ,qCAAAA,8CAAAA,XAAK1C,2BAAAA;IACbuD,iBAAS,CAACZ,uCAAAA,gDAAAA,XAAO3C,6BAAAA;AAXvB,AAYE,GAAU,AAAC5H,6CAAEkL,aAAOC;AAApB;AAAA,AACE,CAAM,AAAelD,0BAAOO;;AAC5B,CAAM,AAAeT,uBAAIM;;AACzB,GAAI,iBAAA,hBAAM6C;AACR,2BAAA,1BAAM,AAAaH;;AACnB,GAAI,AAACtC,4BAAOyC;AACV,2BAAA,1BAAM,AAAaH;;AACnB,CAAM,AAAeA,4BAASG;;;;AAC9BF,AAEA,AAAA,6BAAA;;AACJ,8BAAA,7BAAM,AAAeA;;AACrB,GAAI,mBAAA,lBAAMG;AACR,6BAAA,5BAAM,AAAaF;;AACnB,GAAI,AAACxC,4BAAO0C;AACV,6BAAA,5BAAM,AAAaF;;AACnB,CAAM,AAAeA,8BAAWE;;;;AACpC,AAAcrD,qBAAGG;;AACjB,AAAcH,qBAAGC;;AACjB,AAAcD,qBAAGiD;;AACjB,AAAcjD,qBAAGkD;;AACjB,AAAclD,qBAAGmD;;AACjB,AAAcpE,kBAAMiB;;;AAnC1B;AAAA,eAAA6C;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA1D,2BAAA,AAAAtC,cAAA6F;AAAA,AAAA,GAAAvD;AAAA,AAAA,IAAAuD,uBAAAvD;AAAA,AAAA,GAAA,AAAAC,6BAAAsD;AAAA,IAAArD,wBAAA,AAAAC,sBAAAoD;AAAA,AAAA,eAAA,AAAAnD,qBAAAmD;eAAArD;eAAA,AAAA7D,gBAAA6D;eAAA;;;;;;;AAAA,cAAA,AAAAI,gBAAAiD,1BAAQ/C;AAAR,AAAA,AACE,IAAME,WAAG,uBAAA,vBAAChB;IACJiB,WAAG,uBAAA,vBAACjB;IACJiE,gBAAQ,uBAAA,vBAACjE;IACTkE,iBAAS,uBAAA,vBAAClE;IACVmE,kBAAU,uBAAA,vBAACnE;IACXmB,cAAM,uBAAA,vBAACnB;IACPoB,mBAAW,2EAAA,IAAA,/EAACC,mDAAqB,AAACC,eAAKR;IACvCS,YAAI,AAACC,eAAKJ;IACVK,sBAAc,AAACb,gBAAMQ;IACrBM,YAAI,+EAAA,7EAAI,AAACxI,6CAAEqI,UAAIE,yBAAkBA;IACjC2C,eAAO,CAACZ,qCAAAA,8CAAAA,XAAK1C,2BAAAA;IACbuD,iBAAS,CAACZ,uCAAAA,gDAAAA,XAAO3C,6BAAAA;AAXvB,AAYE,GAAU,AAAC5H,6CAAEkL,aAAOC;AAApB;AAAA,AACE,CAAM,AAAelD,0BAAOO;;AAC5B,CAAM,AAAeT,uBAAIM;;AACzB,GAAI,iBAAA,hBAAM6C;AACR,2BAAA,1BAAM,AAAaH;;AACnB,GAAI,AAACtC,4BAAOyC;AACV,2BAAA,1BAAM,AAAaH;;AACnB,CAAM,AAAeA,4BAASG;;;;AAC9BF,AAEA,AAAA,6BAAA;;AACJ,8BAAA,7BAAM,AAAeA;;AACrB,GAAI,mBAAA,lBAAMG;AACR,6BAAA,5BAAM,AAAaF;;AACnB,GAAI,AAACxC,4BAAO0C;AACV,6BAAA,5BAAM,AAAaF;;AACnB,CAAM,AAAeA,8BAAWE;;;;AACpC,AAAcrD,qBAAGG;;AACjB,AAAcH,qBAAGC;;AACjB,AAAcD,qBAAGiD;;AACjB,AAAcjD,qBAAGkD;;AACjB,AAAclD,qBAAGmD;;AACjB,AAAcpE,kBAAMiB;;;AAnC1B;AAAA,eAAA,AAAAH,eAAAgD;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAoCA,OAAcvK,mBAAOyG;;;AAE3B,AAAA,+BAAA,uCAAAiC,tEAAMuC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMoC,wEACFf,KAAKC,OAAOnK;AADhB,AACwB,qFAAA,9EAACkL,2DAAiBhB,KAAKC,OAAOnK;;;AADtD,CAAA,6DAAA,7DAAMiL,wEAEFf,KAAKC,OAAOnK,OAAOgJ;AAFvB,AAGG,mGAAA,5FAACkC,2DAAiBhB,KAAKC,OAAOnK,OAAOgJ;;;AAHxC,CAAA,6DAAA,7DAAMiC,wEAIFf,KAAKC,OAAOnK,OAAOgJ,cAAcC;AAJrC,AAKG,GAAU,AAACrJ,6CAAEsK,KAAKC;AAAlB;;AAAA,AACE,GAAI,OAASD;AACX,GAAU,EAAK,AAAC7B,4BAAO6B,WAAM,AAAC7B,4BAAO8B;AAArC;;AAAA,AACE,IAAMhB,OAAK,uBAAA,vBAACzC;AAAZ,AACE,CAAM,AAAeyC,mBAAM,MAAA,LAAKe,wDAAYC;;AAC5C,OAASnK,cAAOmJ;;;AACpB,IAAMC,UAAQ,uBAAA,vBAAC1C;IACT2C,UAAQ,uBAAA,vBAAC3C;IACT6C,QAAM,AAACd,iFAAG,iBAAAzH,mBAAI,AAAA,8GAAW,AAACD,eAAKmJ;AAArB,AAAA,oBAAAlJ;AAAAA;;AAA4B,OAAA,8GAAW,AAACD,eAAKoJ;;;AAF7D,AAGE,oBAAMlB;AAAN,AAAU,qBAAA,pBAAM,AAAaG;;AAA7B;;AACIA,AAEA,AAAA,sBAAA;;AACJ,CAAM,AAAeC,sBAAS,sIAAA,uDAAA,hJAAK,AAAA,kFAAMa,uDAAUX;;AACnD,AAAcH,oBAAQC;;AACtB,AAAcrJ,mBAAOoJ;;AACrB,yBAAA,zBACEC,uCAEA,WAAKG;AAAL,AACE,AAASH,eAAQ,CAAA,sEAAA,tBAAS,AAACI,eAAKS,0DAAa,AAACT,eAAKU;;AACnD,OAAiBX;;;AACrB,yBAAA,zBAAmBH,oCAEA,WAAKG;AAAL,AACE,GAAM,sDAAA,tDAAC5J,6CAAE,AAAU4J;AAAnB,AACE,AAAiBA;;AACjB,2BAAA,WAAA2B,/BAACxB;AAAD,AAAO,GAAM,sEAAA,tEAAC/J,6CAAE,AAAAuL;AAAT,AACE,QAAM,AAAAA,wBAAW,AAACvB,cAAI,AAAAuB;;AADxB;;GAED,AAACtB,kDAAU,AAAYT;;AAJ/B;;;;AAKrB,yBAAA,zBACEA,kCAEA,WAAKI;AAAL,AACE,oBAAM,iBAAA/J,oBAAK,AAAQ2J;AAAb,AAAA,oBAAA3J;AACK,qBAAI2J,AAEA,AAAA,2BAAA,zCACAQ;;AAJTnK;;;AAAN,AAKM2J,AAEA,AAAA,sBAAA;;AACJ,AAACa,kCAAsB,AAAA,sFAAQC,MAAM,AAAA,sFAAQC,QAAQf;;AACrD,IAAMD,OAAK,uBAAA,vBAACzC;AAAZ,AACE,oBAAA,nBAAM,AAAeyC;;AACrB,AAAcC,oBAAQD;;AACtB,OAACrL,6BACC;AAAA,AACE,IAAMsN,aAAW,+CAAA,WAAAC,1DAACtL;AAAD,AAAS,sFAAA,/EAACH,6CAAE,gBAAAyL,hBAAChI;GACX,AAACiI,eAAK,AAACC,0DACCC,mEACA,mBAAA,WAAAC,9BAACC;AAAD,AACG,oDAAK,AAAA,kFAAAD,+DACA,AAAChD,iFAAG,AAAA,8GAAW,eAAAgD,fAAC1K;GAEtB,AAACE,6CAAK,AAAA,uFAAUiJ,MACV,AAAA,uFAAUC;IACvCwB,yBACE,mBAAA,WAAAC,9BAACF;AAAD,AAAW,oDAAK,AAAA,kFAAAE,+DAAS,AAACnD,iFAAG,AAAA,8GAAW,eAAAmD,fAAC7K;GAC/B,AAAA,uFAAUoJ;IACtB0B,uBACE,mBAAA,WAAAC,9BAACJ;AAAD,AAAW,oDAAK,AAAA,kFAAAI,+DAAS,AAACrD,iFAAG,AAAA,8GAAW,eAAAqD,fAAC/K;GAC/B,AAAA,uFAAUmJ;IACtB6B,mBAAiB,AAACxF,cAAI,AAAC+D,eAAKqB;IAC5BK,iBAAe,AAACzF,cAAI,AAAC+D,eAAKuB;IAC1BI,cAAY,4CAAA,WAAAC,vDAACzL;AAAD,AAAM,OAAC6G,gBAAM,6GAAA4E,sDAAAA,lKAACP,uDAAAA,yEAAAA;GACZ,AAACQ,qDAAWJ,iBACAC;IAC1BI,YAAU,4CAAA,WAAAC,vDAAC5L;AAAD,AAAM,OAAC6G,gBAAM,yGAAA+E,oDAAAA,5JAACR,qDAAAA,uEAAAA;GACZ,AAACM,qDAAWH,eACAD;IACxBzC,cAAY,CAAA,CAAG,AAACjG,gBAAM,+CAAA,WAAAiJ,1DAACvM;AAAD,AAAS,OAAA,kFAAM,gBAAAuM,hBAAChF;GACd8D,eACT,AAAC/H,gBAAM4I,gBACP,AAAC5I,gBAAM+I;IACtBG,QAAM,gDAAA,WAAAC,3DAAC1C;AAAD,AACG,IAAA9I,mBAAI,uBAAAwL,vBAAClE;AAAL,AAAA,oBAAAtH;AAAAA;;AAAmB,OAACsH,uBAAW,gBAAAkE,hBAAClF;;GACjC,AAAC5E,sDAAO0I,WAAWa,8DAAYG;AA7B7C,AA8BE,AAACzC,oBAAK,WAAK8C;AAAL,AACE,oBAAI,AAAA,kFAAMA;AACR,iHAAA,1GAAC1D,sDAAY0D,aACArD,QACAE,YACA,AAACM,cAAIX;;AAElB,IAAAyD,aAAoBD;eAApB,AAAAvK,4CAAAwK,WAAA,IAAA,tEAAOxC;iBAAP,AAAAhI,4CAAAwK,WAAA,IAAA,xEAAYvC;AAAZ,AACE,OAACe,2DAAiBhB,SACAC,WACAf,QACAE,YACA,AAACM,cAAIX;;GAC7BsD;;AACN,OAAcnD,oBAAQD;;;AA1DhC;;;;AA2DJ,GAAM,iBAAA,hBAAGH;AAAT,AAA0B,uBAAA,fAAM,AAAQI;;AAAxC;;;;;;AAlGT,CAAA,uDAAA,vDAAM6B;;AAAN,AAoGA,wBAAA,xBAAM0B,wDACHC,KAAKC;AADR,AAEE,GAAU,AAACjN,6CAAEgN,KAAKC;AAAlB;;AAAA,AAAwB,OAAC3B,2DAAiB0B,KAAKC,KAAK7C;;;AAEtD,yBAAA,zBAAe8C,0DACZC,KAAKC;AADR,AAEE,IAAMJ,OAAK,AAAClM,qBAASqM;IAAMF,OAAK,AAACnM,qBAASsM;AAA1C,AAAiD,OAACL,sBAAUC,KAAKC;;;AAEnE,0BAAA,1BAAeI,4DACZnH;AADH,AAEE,6BAAA,qBAAIA,rBACApF,tBACAqJ","names":["openscd.scl/after-next-paint","f","js/requestAnimationFrame","js/setTimeout","openscd.scl/references","openscd.scl/defaults","p__14719","map__14720","cljs.core/--destructure-map","cljs.core.get","openscd.scl/with-defaults","attrs","tag","element","default-attrs","cljs.core.keyword","cljs.core.assoc","cljs.core.merge","p__14722","map__14723","openscd.scl/tos","fields","to","from","scope","elm","ancestor","and__5000__auto__","p1__14721#","cljs.core/some","cljs.core._EQ_","cljs.core/vec","referents","cljs.core.filter","target","cljs.core/every?","p__14724","map__14725","p__14726","map__14727","openscd.scl/with-references","content","refs","cljs.core.map","openscd.scl/domToEdn","cljs.core/complement","cljs.core/nil?","cljs.core/flatten","cljs.core.repeat","cljs.core/meta","or__5002__auto__","cljs.core.into","this__5300__auto__","k__5301__auto__","this__5302__auto__","k14729","else__5303__auto__","G__14733","cljs.core/Keyword","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__14734","vec__14735","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__14728","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","cljs.core/count","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this14730","other14731","this__5310__auto__","k__5311__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5307__auto__","G__14738","this__5308__auto__","k__5309__auto__","pred__14739","cljs.core/keyword-identical?","expr__14740","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","openscd.scl/Elm","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__14732","extmap__5342__auto__","G__14742","cljs.core/record?","openscd.scl/->Elm","openscd.scl/map->Elm","cljs.core/memoize","dom","pred__14743","expr__14744","cljs.core/=","cljs.core.not_EQ_","cljs.core.apply","cljs.core/sorted-map","cljs.core.mapcat","a","cljs.core/set","openscd.scl/render-attributes","table","js/document.createElement","seq__14746","chunk__14747","count__14748","i__14749","vec__14756","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__14759","cljs.core/first","cljs.core/next","k","v","tr","th","td","ns-th","components","clojure.string.split","cljs.core/name","anm","cljs.core/last","ans-component","ans","clojure.string/blank?","openscd.scl/tag-and-id","node","elm-id","js/module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$identity.identity","var_args","G__14764","openscd.scl/render-node","js/Error","data","openscd.scl.render_node","sibling-count","odd","old-or-new","span","details","summary","child-count","title","e","cljs.core/hash","p1__14762#","cljs.core/run!","cljs.core/not","cljs.core.array_seq","cljs.core.sort_by","openscd.scl/show-data","js/document.body","openscd.scl/render-attribute-diff","ours","theirs","ks","cljs.core/sorted-set","cljs.core/keys","seq__14765","chunk__14766","count__14767","i__14768","td-ours","td-arrow","td-theirs","v-ours","v-theirs","G__14779","openscd.scl/render-node-diff","openscd.scl.render_node_diff","p1__14769#","node-pairs","p1__14770#","cljs.core/vals","cljs.core.merge_with","cljs.core/concat","p1__14771#","cljs.core/group-by","their-identified-nodes","p1__14772#","our-identified-nodes","p1__14773#","their-identities","our-identities","their-nodes","p1__14774#","clojure.set.difference","our-nodes","p1__14775#","p1__14776#","nodes","p1__14777#","node-or-pair","vec__14780","openscd.scl/show-diff","edn1","edn2","openscd.scl/sclDomDiff","dom1","dom2","openscd.scl/sclDomToEdn"],"sourcesContent":["(ns openscd.scl\n  (:require [\"@openenergytools/scl-lib/dist/tBaseElement/identity.js\" :rename\n             {identity id}]\n            [fipp.edn :refer [pprint]]\n            [clojure.string :refer [blank?]]\n            [clojure.set :refer [difference]]\n            [clojure.edn :refer [read-string]]))\n\n(defn after-next-paint [f] (js/requestAnimationFrame (fn [] (js/setTimeout f))))\n\n(def references\n  {:ServerAt [{:fields [{:to \"name\", :from \"apName\"}],\n               :to \":scope>AccessPoint\",\n               :from \":scope>AccessPoint>ServerAt\",\n               :scope \"IED\"}],\n   ; :LogControl [{:fields [{:to \"name\", :from \"datSet\"}],\n   ;               :to \":scope>DataSet\",\n   ;               :from \":scope>LogControl\",\n   ;               :scope \"LN\"}\n   ;              {:fields [{:to \"name\", :from \"datSet\"}],\n   ;               :to \":scope>DataSet\",\n   ;               :from \":scope>LogControl\",\n   ;               :scope \"LN0\"}],\n   ;   :FCDA [{:fields [{:to \"inst\", :from \"ldInst\"}],\n   ;           :to \":scope>AccessPoint>Server>LDevice\", :from\n   ;           \":scope>AccessPoint>Server>LDevice>LN>DataSet>FCDA\",\n   ;           :scope \"IED\"}\n   ;          {:fields [{:to \"inst\", :from \"ldInst\"}],\n   ;           :to \":scope>AccessPoint>Server>LDevice\", :from\n   ;           \":scope>AccessPoint>Server>LDevice>LN0>DataSet>FCDA\",\n   ;           :scope \"IED\"}],\n   ; :ConnectedAP [{:fields [{:to \"name\", :from \"iedName\"}],\n   ;                :to \":scope>IED\", :from\n   ;                \":scope>Communication>SubNetwork>ConnectedAP\", :scope\n   ;                \"SCL\"}],\n   :DO [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DOType\",\n         :from \":scope>LNodeType>DO\",\n         :scope \"DataTypeTemplates\"}],\n   :SDO [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DOType\",\n          :from \":scope>DOType>SDO\",\n          :scope \"DataTypeTemplates\"}],\n   :BDA [{:fields [{:to \"id\", :from \"type\"}],\n          :to \":scope>DAType, :scope>EnumType\",\n          :from \":scope>DOType>DA,\n          :scope>DAType>BDA\",\n          :scope \"DataTypeTemplates\"}],\n   ;   :Terminal [{:fields [{:to \"name\", :from \"substationName\"}],\n   ;               :to \":scope>Substation, :scope>Process,\n   ;               :scope>Line\", :from \":scope>>Terminal\", :scope\n   ;               \"SCL\"}],\n   ; :LN0 [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;        :to \":scope>DataTypeTemplates>LNodeType\",\n   ;        :from \":scope>IED>AccessPoint>Server>LDevice>LN0\",\n   ;        :scope \"SCL\"}],\n   ;   :SampledValueControl [{:fields [{:to \"name\", :from \"datSet\"}],\n   ;                          :to \":scope>DataSet\", :from\n   ;                          \":scope>SampledValueControl\", :scope\n   ;                          \"LN0\"}],\n   :GSEControl [{:fields [{:to \"name\", :from \"datSet\"}],\n                 :to \":scope>DataSet\",\n                 :from \":scope>GSEControl\",\n                 :scope \"LN0\"}],\n   :DA [{:fields [{:to \"id\", :from \"type\"}],\n         :to \":scope>DAType, :scope>EnumType\",\n         :from \":scope>DOType>DA, :scope>DAType>BDA\",\n         :scope \"DataTypeTemplates\"}]\n   ;   :ReportControl [{:fields [{:to \"name\", :from \"datSet\"}],\n   ;                    :to \":scope>DataSet\", :from\n   ;                    \":scope>ReportControl\",\n   ;                    :scope \"LN\"}\n   ;                   {:fields [{:to \"name\", :from \"datSet\"}],\n   ;                    :to \":scope>DataSet\",\n   ;                    :from \":scope>ReportControl\",\n   ;                    :scope \"LN0\"}],\n   ; :LN [{:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ; \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\",\n   ;       :from \":scope>IED>AccessPoint>LN\",\n   ;       :scope \"SCL\"}\n   ;      {:fields [{:to \"id\", :from \"lnType\"} {:to \"lnClass\", :from\n   ;      \"lnClass\"}],\n   ;       :to \":scope>DataTypeTemplates>LNodeType\", :from\n   ;       \":scope>IED>AccessPoint>Server>LDevice>LN\",\n   ;       :scope \"SCL\"}]})\n  })\n\n(def defaults\n  {:AccessPoint {:clock \"false\", :desc \"\", :kdc \"false\", :router \"false\"},\n   :Association {:prefix \"\"},\n   :BDA {:count \"0\", :desc \"\", :valImport \"false\", :valKind \"Set\"},\n   :Bay {:desc \"\"},\n   :ClientLN {:prefix \"\"},\n   :ClientServices {:bufReport \"false\",\n                    :goose \"false\",\n                    :gsse \"false\",\n                    :noIctBinding \"false\",\n                    :rGOOSE \"false\",\n                    :rSV \"false\",\n                    :readLog \"false\",\n                    :supportsLdName \"false\",\n                    :sv \"false\",\n                    :unbufReport \"false\"},\n   :CommProt {:ipv6 \"false\"},\n   :Communication {:desc \"\"},\n   :ConductingEquipment {:desc \"\", :virtual \"false\"},\n   :ConfDataSet {:modify \"true\"},\n   :ConfLNs {:fixLnInst \"false\", :fixPrefix \"false\"},\n   :ConfReportControl {:bufConf \"false\", :bufMode \"both\"},\n   :ConnectedAP {:desc \"\"},\n   :ConnectivityNode {:desc \"\"},\n   :DA {:count \"0\",\n        :dchg \"false\",\n        :desc \"\",\n        :dupd \"false\",\n        :qchg \"false\",\n        :valImport \"false\",\n        :valKind \"Set\"},\n   :DAI {:desc \"\"},\n   :DAType {:desc \"\", :iedType \"\"},\n   :DO {:desc \"\", :transient \"false\"},\n   :DOI {:desc \"\"},\n   :DOType {:desc \"\", :iedType \"\"},\n   :DataSet {:desc \"\"},\n   :EnumType {:desc \"\"},\n   :EnumVal {:desc \"\"},\n   :EqFunction {:desc \"\"},\n   :EqSubFunction {:desc \"\"},\n   :FCDA {:prefix \"\"},\n   :FileHandling {:ftp \"false\", :ftps \"false\", :mms \"true\"},\n   :Function {:desc \"\"},\n   :GOOSE {:fixedOffs \"false\", :goose \"true\", :rGOOSE \"false\"},\n   :GOOSESecurity {:desc \"\"},\n   :GSE {:desc \"\"},\n   :GSEControl\n     {:desc \"\", :fixedOffs \"false\", :securityEnable \"None\", :type \"GOOSE\"},\n   :GSESettings {:appID \"Fix\",\n                 :cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :dataLabel \"Fix\",\n                 :kdaParticipant \"false\"},\n   :GeneralEquipment {:desc \"\", :virtual \"false\"},\n   :Header {:nameStructure \"IEDName\", :revision \"\"},\n   :IED {:desc \"\",\n         :engRight \"full\",\n         :originalSclRelease \"1\",\n         :originalSclRevision \"A\",\n         :originalSclVersion \"2003\"},\n   :Inputs {:desc \"\"},\n   :LDevice {:desc \"\"},\n   :LN {:desc \"\", :prefix \"\"},\n   :LNode {:desc \"\", :iedName \"None\", :ldInst \"\", :lnInst \"\", :prefix \"\"},\n   :LNodeType {:desc \"\", :iedType \"\"},\n   :Line {:desc \"\"},\n   :Log {:desc \"\"},\n   :LogControl {:bufTime \"0\",\n                :desc \"\",\n                :intgPd \"0\",\n                :lnClass \"LLN0\",\n                :logEna \"true\",\n                :prefix \"\",\n                :reasonCode \"true\"},\n   :LogSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :intgPd \"Fix\",\n                 :logEna \"Fix\",\n                 :trgOps \"Fix\"},\n   :McSecurity {:encryption \"false\", :signature \"false\"},\n   :NeutralPoint {:desc \"\", :name \"\"},\n   :PhysConn {:desc \"\"},\n   :PowerTransformer {:desc \"\", :virtual \"false\"},\n   :Process {:desc \"\"},\n   :ProtNs {:type \"8-MMS\"},\n   :RedProt {:hsr \"false\", :prp \"false\", :rstp \"false\"},\n   :ReportControl {:bufOvfl \"true\",\n                   :bufTime \"0\",\n                   :buffered \"false\",\n                   :configRef \"false\",\n                   :dataRef \"false\",\n                   :dataSet \"false\",\n                   :desc \"\",\n                   :entryID \"false\",\n                   :indexed \"true\",\n                   :intgPd \"0\",\n                   :reasonCode \"false\",\n                   :seqNum \"false\",\n                   :timeStamp \"false\"},\n   :ReportSettings {:bufTime \"Fix\",\n                    :cbName \"Fix\",\n                    :datSet \"Fix\",\n                    :intgPd \"Fix\",\n                    :optFields \"Fix\",\n                    :owner \"false\",\n                    :resvTms \"false\",\n                    :rptID \"Fix\",\n                    :trgOps \"Fix\"},\n   :RptEnabled {:desc \"\", :max \"1\"},\n   :SDI {:desc \"\"},\n   :SDO {:count \"0\", :desc \"\"},\n   :SMV {:desc \"\"},\n   :SMVSecurity {:desc \"\"},\n   :SMVSettings {:cbName \"Fix\",\n                 :datSet \"Fix\",\n                 :kdaParticipant \"false\",\n                 :nofASDU \"Fix\",\n                 :optFields \"Fix\",\n                 :pdcTimeStamp \"false\",\n                 :samplesPerSec \"false\",\n                 :smpRate \"Fix\",\n                 :svID \"Fix\",\n                 :synchSrcId \"false\"},\n   :SMVsc\n     {:delivery \"multicast\", :deliveryConf \"false\", :rSV \"false\", :sv \"true\"},\n   :SampledValueControl {:dataSet \"false\",\n                         :desc \"\",\n                         :multicast \"true\",\n                         :refreshTime \"false\",\n                         :sampleRate \"false\",\n                         :security \"false\",\n                         :securityEnable \"None\",\n                         :smpMod \"SmpPerPeriod\",\n                         :synchSourceId \"false\",\n                         :timestamp \"false\"},\n   :Server {:certificate \"false\",\n            :desc \"\",\n            :none \"true\",\n            :password \"false\",\n            :strong \"false\",\n            :timeout \"30\",\n            :weak \"false\"},\n   :ServerAt {:desc \"\"},\n   :Services {:nameLength \"32\"},\n   :SettingControl {:actSG \"1\", :desc \"\"},\n   :SettingGroups {:resvTms \"false\"},\n   :SubEquipment {:desc \"\", :phase \"none\", :virtual \"false\"},\n   :SubFunction {:desc \"\"},\n   :SubNetwork {:desc \"\"},\n   :Substation {:desc \"\"},\n   :TapChanger {:desc \"\", :virtual \"false\"},\n   :Terminal {:desc \"\", :name \"\"},\n   :TimeSyncProt\n     {:c37_238 \"false\", :iec61850_9_3 \"false\", :other \"false\", :sntp \"true\"},\n   :TransformerWinding {:desc \"\", :virtual \"false\"},\n   :TrgOps\n     {:dchg \"false\", :dupd \"false\", :gi \"true\", :period \"false\", :qchg \"false\"},\n   :ValueHandling {:setToRO \"false\"},\n   :Voltage {:multiplier \"\"},\n   :VoltageLevel {:desc \"\"}})\n\n(declare scl)\n(declare domToEdn)\n\n(defn with-defaults\n  [{:keys [attrs tag], :as element}]\n  (let [default-attrs (get defaults (keyword tag))]\n    (assoc element\n      :attrs (if default-attrs (merge default-attrs attrs) attrs))))\n\n(defn tos\n  [{:keys [fields to from scope]} elm]\n  (let [ancestor (.closest elm scope)]\n    (if (and ancestor (some #(= elm %) (vec (.querySelectorAll ancestor from))))\n      (let [referents (filter (fn [target]\n                                (every? (fn [{:keys [from to]}]\n                                          (= (.getAttribute target to)\n                                             (.getAttribute elm from)))\n                                        fields))\n                        (vec (.querySelectorAll ancestor to)))]\n        referents)\n      nil)))\n\n(defn with-references\n  [{:keys [tag content], :as element}]\n  (let [refs (get references (keyword tag))\n        referents (map domToEdn\n                    (filter (complement nil?)\n                      (flatten\n                        (map tos refs (repeat (::element (meta element)))))))]\n    (assoc element\n      :content (if (or content referents) (into content referents)))))\n\n(defrecord Elm [^js/String tag ^PersistentTreeMap attrs\n                ^PersistentHashSet content])\n\n(def ^:export domToEdn\n  (memoize\n    (fn [dom]\n      (condp = (.-nodeType dom)\n        3 (.-textContent dom) ; text\n        9 (recur (.-documentElement dom)) ; document\n        1 (when (not= (.-tagName dom) \"DataTypeTemplates\")\n            (-> (Elm. (.-tagName dom)\n                      (apply sorted-map\n                        (mapcat (fn [a] [(keyword (.-name a)) (.-value a)])\n                          (.-attributes dom)))\n                      (set (filter (complement nil?)\n                             (map domToEdn (.-childNodes dom))))\n                      {::element dom}\n                      nil)\n                with-defaults\n                with-references)) ; element\n        nil))))\n\n(defn render-attributes\n  [attrs target]\n  (let [table (js/document.createElement \"table\")]\n    (doseq [[k v] attrs]\n      (let [tr (js/document.createElement \"tr\")\n            th (js/document.createElement \"th\")\n            td (js/document.createElement \"td\")\n            ns-th (js/document.createElement \"th\")\n            components (clojure.string/split (name k) #\":\" 2)\n            anm (last components)\n            ans-component (first components)\n            ans (if (= anm ans-component) \"\" ans-component)]\n        (set! (.-textContent ns-th) ans)\n        (set! (.-textContent th) anm)\n        (if (nil? v)\n          (set! (.-innerHTML td) \"<i>(missing)</i>\")\n          (if (blank? v)\n            (set! (.-innerHTML td) \"<i>(empty)</i>\")\n            (set! (.-textContent td) v)))\n        (.appendChild tr ns-th)\n        (.appendChild tr th)\n        (.appendChild tr td)\n        (.appendChild table tr)))\n    (.appendChild target table)))\n\n(defn tag-and-id\n  [node]\n  (if (and (:tag node) (::element (meta node)))\n    (let [elm-id (id (::element (meta node)))]\n      [(:tag node) (if (string? elm-id) elm-id nil)])\n    nil))\n\n(defn render-node\n  ([data target] (render-node data target 1))\n  ([data target sibling-count] (render-node data target sibling-count false))\n  ([data target sibling-count odd]\n   (render-node data target sibling-count odd nil))\n  ([data target sibling-count odd old-or-new]\n   (if (string? data)\n     (when (not (clojure.string/blank? data))\n       (let [span (js/document.createElement \"span\")]\n         (set! (.-textContent span) data)\n         (.append target span)))\n     (let [details (js/document.createElement \"details\")\n           summary (js/document.createElement \"summary\")\n           child-count (count (filter :tag (:content data)))\n           title (id (::element (meta data)))]\n       (when odd (set! (.-className details) \"odd\"))\n       (when old-or-new\n         (-> summary\n             .-classList\n             (.add (name old-or-new))))\n       (set! (.-textContent summary) (str (:tag data) \" \" title \" \"))\n       (.appendChild details summary)\n       (.appendChild target details)\n       (.addEventListener\n         summary\n         \"contextmenu\"\n         (fn [e] (.append summary (str \" \" (hash data))) (.preventDefault e)))\n       (.addEventListener summary\n                          \"mousedown\"\n                          (fn [e]\n                            (when (= (.-button e) 1)\n                              (.preventDefault e)\n                              (run! #(when (= (.-tagName %) \"DETAILS\")\n                                       (set! (.-open %) (not (.-open %))))\n                                    (array-seq (.-children details))))))\n       (.addEventListener\n         details\n         \"toggle\"\n         (fn [e]\n           (when (and (.-open details)\n                      (-> details\n                          .-classList\n                          (.contains \"rendered\")\n                          not))\n             (-> details\n                 .-classList\n                 (.add \"rendered\"))\n             (render-attributes (:attrs data) details)\n             (let [span (js/document.createElement \"span\")]\n               (set! (.-textContent span) \"Loading...\")\n               (.appendChild details span)\n               (after-next-paint\n                 (fn []\n                   (do (run! (fn [node]\n                               (render-node node details child-count (not odd)))\n                             (sort-by tag-and-id (:content data)))\n                       (.removeChild details span))))))))\n       (when (< sibling-count 2) (set! (.-open details) true))))))\n\n(defn show-data [data] (render-node data js/document.body) data)\n\n(defn render-attribute-diff\n  [ours theirs target]\n  (when-not (= ours theirs)\n    (let [table (js/document.createElement \"table\")\n          ks (apply sorted-set (into (keys theirs) (keys ours)))]\n      (doseq [k ks]\n        (let [tr (js/document.createElement \"tr\")\n              th (js/document.createElement \"th\")\n              td-ours (js/document.createElement \"td\")\n              td-arrow (js/document.createElement \"td\")\n              td-theirs (js/document.createElement \"td\")\n              ns-th (js/document.createElement \"th\")\n              components (clojure.string/split (name k) #\":\" 2)\n              anm (last components)\n              ans-component (first components)\n              ans (if (= anm ans-component) \"\" ans-component)\n              v-ours (ours k)\n              v-theirs (theirs k)]\n          (when-not (= v-ours v-theirs)\n            (set! (.-textContent ns-th) ans)\n            (set! (.-textContent th) anm)\n            (if (nil? v-ours)\n              (set! (.-innerHTML td-ours) \"<i>(missing)</i>\")\n              (if (blank? v-ours)\n                (set! (.-innerHTML td-ours) \"<i>(empty)</i>\")\n                (set! (.-textContent td-ours) v-ours)))\n            (-> td-arrow\n                .-classList\n                (.add \"arrow\"))\n            (set! (.-textContent td-arrow) \"->\")\n            (if (nil? v-theirs)\n              (set! (.-innerHTML td-theirs) \"<i>(missing)</i>\")\n              (if (blank? v-theirs)\n                (set! (.-innerHTML td-theirs) \"<i>(empty)</i>\")\n                (set! (.-textContent td-theirs) v-theirs)))\n            (.appendChild tr ns-th)\n            (.appendChild tr th)\n            (.appendChild tr td-ours)\n            (.appendChild tr td-arrow)\n            (.appendChild tr td-theirs)\n            (.appendChild table tr))))\n      (.appendChild target table))))\n\n(defn render-node-diff\n  ([ours theirs target] (render-node-diff ours theirs target 1))\n  ([ours theirs target sibling-count]\n   (render-node-diff ours theirs target sibling-count false))\n  ([ours theirs target sibling-count odd]\n   (when-not (= ours theirs)\n     (if (string? ours)\n       (when-not (and (blank? ours) (blank? theirs))\n         (let [span (js/document.createElement \"span\")]\n           (set! (.-textContent span) (str ours \" -> \" theirs))\n           (.append target span)))\n       (let [details (js/document.createElement \"details\")\n             summary (js/document.createElement \"summary\")\n             title (id (or (::element (meta ours)) (::element (meta theirs))))]\n         (when odd (set! (.-className details) \"odd\"))\n         (-> details\n             .-classList\n             (.add \"diff\"))\n         (set! (.-textContent summary) (str (:tag ours) \" \" title \" \"))\n         (.appendChild details summary)\n         (.appendChild target details)\n         (.addEventListener\n           summary\n           \"contextmenu\"\n           (fn [e]\n             (.append summary (str \" \" (hash ours) \" -> \" (hash theirs)))\n             (.preventDefault e)))\n         (.addEventListener summary\n                            \"auxclick\"\n                            (fn [e]\n                              (when (= (.-button e) 1)\n                                (.preventDefault e)\n                                (run! #(when (= (.-tagName %) \"DETAILS\")\n                                         (set! (.-open %) (not (.-open %))))\n                                      (array-seq (.-children details))))))\n         (.addEventListener\n           details\n           \"toggle\"\n           (fn [e]\n             (when (and (.-open details)\n                        (-> details\n                            .-classList\n                            (.contains \"rendered\")\n                            not))\n               (-> details\n                   .-classList\n                   (.add \"rendered\"))\n               (render-attribute-diff (:attrs ours) (:attrs theirs) details)\n               (let [span (js/document.createElement \"span\")]\n                 (set! (.-textContent span) \"Loading...\")\n                 (.appendChild details span)\n                 (after-next-paint\n                   (fn []\n                     (let [node-pairs (filter #(= (count %) 2)\n                                        (vals (merge-with\n                                                concat\n                                                (group-by\n                                                  #(str (:tag %)\n                                                        (id (::element (meta\n                                                                         %))))\n                                                  (into (:content ours)\n                                                        (:content theirs))))))\n                           their-identified-nodes\n                             (group-by #(str (:tag %) (id (::element (meta %))))\n                                       (:content theirs))\n                           our-identified-nodes\n                             (group-by #(str (:tag %) (id (::element (meta %))))\n                                       (:content ours))\n                           their-identities (set (keys their-identified-nodes))\n                           our-identities (set (keys our-identified-nodes))\n                           their-nodes (map #(first (their-identified-nodes %))\n                                         (difference their-identities\n                                                     our-identities))\n                           our-nodes (map #(first (our-identified-nodes %))\n                                       (difference our-identities\n                                                   their-identities))\n                           child-count (+ (count (filter #(:tag (first %))\n                                                   node-pairs))\n                                          (count their-nodes)\n                                          (count our-nodes))\n                           nodes (sort-by\n                                   #(or (tag-and-id %) (tag-and-id (first %)))\n                                   (concat node-pairs their-nodes our-nodes))]\n                       (run! (fn [node-or-pair]\n                               (if (:tag node-or-pair)\n                                 (render-node node-or-pair\n                                              details\n                                              child-count\n                                              (not odd)\n                                              :new)\n                                 (let [[ours theirs] node-or-pair]\n                                   (render-node-diff ours\n                                                     theirs\n                                                     details\n                                                     child-count\n                                                     (not odd)))))\n                             nodes)\n                       (.removeChild details span))))))))\n         (when (< sibling-count 2) (set! (.-open details) true)))))))\n\n(defn show-diff\n  [edn1 edn2]\n  (when-not (= edn1 edn2) (render-node-diff edn1 edn2 js/document.body)))\n\n(defn ^:export sclDomDiff\n  [dom1 dom2]\n  (let [edn1 (domToEdn dom1) edn2 (domToEdn dom2)] (show-diff edn1 edn2)))\n\n(defn ^:export sclDomToEdn\n  [dom]\n  (-> dom\n      domToEdn\n      show-data))\n"]}