import "./cljs_env.js";
import "./shadow.js.js";
import "./module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$tags.js";
shadow$provide.module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$identity = function(global, require, module, exports) {
  function terminalIdentity(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("connectivityNode")}`;
  }
  function ixNamingIdentity(e) {
    const [name, ix] = ["name", "ix"].map(naming => e.getAttribute(naming));
    return `${identity(e.parentElement)}>${name}${ix ? `[${ix}]` : ""}`;
  }
  function controlBlockIdentity(e) {
    const [ldInst, cbName] = ["ldInst", "cbName"].map(name => e.getAttribute(name));
    return `${ldInst} ${cbName}`;
  }
  function namingIdentity(e) {
    return "SCL" === e.parentElement.tagName ? e.getAttribute("name") : `${identity(e.parentElement)}>${e.getAttribute("name")}`;
  }
  function singletonIdentity(e) {
    return identity(e.parentElement).toString();
  }
  function idNamingIdentity(e) {
    return `#${e.id}`;
  }
  function identity(e) {
    if (null === e || e.closest("Private")) {
      return NaN;
    }
    const tag = e.tagName;
    return (0,require$_DOT__SLASH_tags_DOT_js.isSCLTag)(tag) ? tags[tag].identity(e) : NaN;
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, identity:{enumerable:!0, get:function() {
    return identity;
  }}});
  var require$_DOT__SLASH_tags_DOT_js = require("module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$tags");
  const tags = {AccessControl:{identity:singletonIdentity}, AccessPoint:{identity:namingIdentity}, Address:{identity:singletonIdentity}, Association:{identity:function(e) {
    const [iedName, ldInst, prefix, lnClass, lnInst] = "iedName ldInst prefix lnClass lnInst lnType".split(" ").map(name => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}`;
  }}, Authentication:{identity:singletonIdentity}, BDA:{identity:namingIdentity}, BitRate:{identity:singletonIdentity}, Bay:{identity:namingIdentity}, ClientLN:{identity:function(e) {
    const [apRef, iedName, ldInst, prefix, lnClass, lnInst] = "apRef iedName ldInst prefix lnClass lnInst".split(" ").map(name => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${apRef || ""} ${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst}`;
  }}, ClientServices:{identity:singletonIdentity}, CommProt:{identity:singletonIdentity}, Communication:{identity:singletonIdentity}, ConductingEquipment:{identity:namingIdentity}, ConfDataSet:{identity:singletonIdentity}, ConfLdName:{identity:singletonIdentity}, ConfLNs:{identity:singletonIdentity}, ConfLogControl:{identity:singletonIdentity}, ConfReportControl:{identity:singletonIdentity}, ConfSG:{identity:singletonIdentity}, ConfSigRef:{identity:singletonIdentity}, ConnectedAP:{identity:function(e) {
    const [iedName, apName] = ["iedName", "apName"].map(name => e.getAttribute(name));
    return `${iedName} ${apName}`;
  }}, ConnectivityNode:{identity:namingIdentity}, DA:{identity:namingIdentity}, DAI:{identity:ixNamingIdentity}, DAType:{identity:idNamingIdentity}, DO:{identity:namingIdentity}, DOI:{identity:namingIdentity}, DOType:{identity:idNamingIdentity}, DataObjectDirectory:{identity:singletonIdentity}, DataSet:{identity:namingIdentity}, DataSetDirectory:{identity:singletonIdentity}, DataTypeTemplates:{identity:singletonIdentity}, DynAssociation:{identity:singletonIdentity}, DynDataSet:{identity:singletonIdentity}, 
  EnumType:{identity:idNamingIdentity}, EnumVal:{identity:function(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("ord")}`;
  }}, EqFunction:{identity:namingIdentity}, EqSubFunction:{identity:namingIdentity}, ExtRef:{identity:function(e) {
    if (!e.parentElement) {
      return NaN;
    }
    const parentIdentity = identity(e.parentElement), iedName = e.getAttribute("iedName");
    var intAddr = e.getAttribute("intAddr");
    const intAddrIndex = Array.from(e.parentElement.querySelectorAll(`ExtRef[intAddr="${intAddr}"]`)).indexOf(e);
    if (intAddr) {
      return `${parentIdentity}>${intAddr}[${intAddrIndex}]`;
    }
    const [ldInst, prefix, lnClass, lnInst, doName, daName, serviceType, srcLDInst, srcPrefix, srcLNClass, srcLNInst, srcCBName] = "ldInst prefix lnClass lnInst doName daName serviceType srcLDInst srcPrefix srcLNClass srcLNInst srcCBName".split(" ").map(name => e.getAttribute(name));
    intAddr = srcCBName ? `${serviceType}:${srcCBName} ${srcLDInst}/${srcPrefix ?? ""} ${srcLNClass} ${srcLNInst ?? ""}` : "";
    return `${parentIdentity}>${intAddr ? `${intAddr} ` : ""}${`${iedName} ${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""} ${doName} ${daName || ""}`}`;
  }}, FCDA:{identity:function(e) {
    const [ldInst, prefix, lnClass, lnInst, doName, daName, fc, ix] = "ldInst prefix lnClass lnInst doName daName fc ix".split(" ").map(name => e.getAttribute(name)), dataPath = `${ldInst}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}.${doName} ${daName || ""}`;
    return `${identity(e.parentElement)}>${dataPath} (${fc}${ix ? ` [${ix}]` : ""})`;
  }}, FileHandling:{identity:singletonIdentity}, Function:{identity:namingIdentity}, GeneralEquipment:{identity:namingIdentity}, GetCBValues:{identity:singletonIdentity}, GetDataObjectDefinition:{identity:singletonIdentity}, GetDataSetValue:{identity:singletonIdentity}, GetDirectory:{identity:singletonIdentity}, GOOSE:{identity:singletonIdentity}, GOOSESecurity:{identity:namingIdentity}, GSE:{identity:controlBlockIdentity}, GSEDir:{identity:singletonIdentity}, GSEControl:{identity:namingIdentity}, 
  GSESettings:{identity:singletonIdentity}, GSSE:{identity:singletonIdentity}, Header:{identity:singletonIdentity}, History:{identity:singletonIdentity}, Hitem:{identity:function(e) {
    return `${e.getAttribute("version")}\t${e.getAttribute("revision")}`;
  }}, IED:{identity:namingIdentity}, IEDName:{identity:function(e) {
    const iedName = e.textContent, [apRef, ldInst, prefix, lnClass, lnInst] = ["apRef", "ldInst", "prefix", "lnClass", "lnInst"].map(name => e.getAttribute(name));
    return `${identity(e.parentElement)}>${iedName} ${apRef || ""} ${ldInst || ""}/${prefix ?? ""} ${lnClass ?? ""} ${lnInst ?? ""}`;
  }}, Inputs:{identity:singletonIdentity}, IssuerName:{identity:singletonIdentity}, KDC:{identity:function(e) {
    return `${identity(e.parentElement)}>${e.getAttribute("iedName")} ${e.getAttribute("apName")}`;
  }}, LDevice:{identity:function(e) {
    return `${identity(e.closest("IED"))}>>${e.getAttribute("inst")}`;
  }}, LN:{identity:function(e) {
    const [prefix, lnClass, inst] = ["prefix", "lnClass", "inst"].map(name => e.getAttribute(name));
    return `${identity(e.parentElement)}>${prefix ?? ""} ${lnClass} ${inst}`;
  }}, LN0:{identity:singletonIdentity}, LNode:{identity:function(e) {
    const [iedName, ldInst, prefix, lnClass, lnInst, lnType] = "iedName ldInst prefix lnClass lnInst lnType".split(" ").map(name => e.getAttribute(name));
    return "None" === iedName ? `${identity(e.parentElement)}>(${lnClass} ${lnInst ?? ""} ${lnType})` : `${iedName} ${ldInst || "(Client)"}/${prefix ?? ""} ${lnClass} ${lnInst ?? ""}`;
  }}, LNodeType:{identity:idNamingIdentity}, Line:{identity:namingIdentity}, Log:{identity:namingIdentity}, LogControl:{identity:namingIdentity}, LogSettings:{identity:singletonIdentity}, MaxTime:{identity:singletonIdentity}, McSecurity:{identity:singletonIdentity}, MinTime:{identity:singletonIdentity}, NeutralPoint:{identity:terminalIdentity}, OptFields:{identity:singletonIdentity}, P:{identity:function(e) {
    if (!e.parentElement) {
      return NaN;
    }
    var eParent = e.parentElement;
    const eType = e.getAttribute("type");
    if ("PhysConn" === eParent.tagName) {
      return `${identity(e.parentElement)}>${eType}`;
    }
    eParent = Array.from(e.parentElement.children).filter(child => child.getAttribute("type") === eType).findIndex(child => child.isSameNode(e));
    return `${identity(e.parentElement)}>${eType} [${eParent}]`;
  }}, PhysConn:{identity:function(e) {
    if (!e.parentElement) {
      return NaN;
    }
    const pcType = e.getAttribute("type");
    return 1 < e.parentElement.children.length && "Connection" !== pcType && "RedConn" !== pcType ? NaN : `${identity(e.parentElement)}>${pcType}`;
  }}, PowerTransformer:{identity:namingIdentity}, Process:{identity:namingIdentity}, ProtNs:{identity:function(e) {
    if (!e.parentElement) {
      return NaN;
    }
    const type = e.getAttribute("type");
    return `${identity(e.parentElement)}>${type || "8-MMS"}\t${e.textContent}`;
  }}, Protocol:{identity:singletonIdentity}, ReadWrite:{identity:singletonIdentity}, RedProt:{identity:singletonIdentity}, ReportControl:{identity:namingIdentity}, ReportSettings:{identity:singletonIdentity}, RptEnabled:{identity:singletonIdentity}, SamplesPerSec:{identity:singletonIdentity}, SampledValueControl:{identity:namingIdentity}, SecPerSamples:{identity:singletonIdentity}, SCL:{identity:function() {
    return "";
  }}, SDI:{identity:ixNamingIdentity}, SDO:{identity:namingIdentity}, Server:{identity:singletonIdentity}, ServerAt:{identity:singletonIdentity}, Services:{identity:singletonIdentity}, SetDataSetValue:{identity:singletonIdentity}, SettingControl:{identity:singletonIdentity}, SettingGroups:{identity:singletonIdentity}, SGEdit:{identity:singletonIdentity}, SmpRate:{identity:singletonIdentity}, SMV:{identity:controlBlockIdentity}, SmvOpts:{identity:singletonIdentity}, SMVsc:{identity:singletonIdentity}, 
  SMVSecurity:{identity:namingIdentity}, SMVSettings:{identity:singletonIdentity}, SubEquipment:{identity:namingIdentity}, SubFunction:{identity:namingIdentity}, SubNetwork:{identity:namingIdentity}, Subject:{identity:singletonIdentity}, Substation:{identity:namingIdentity}, SupSubscription:{identity:singletonIdentity}, TapChanger:{identity:namingIdentity}, Terminal:{identity:terminalIdentity}, Text:{identity:singletonIdentity}, TimerActivatedControl:{identity:singletonIdentity}, TimeSyncProt:{identity:singletonIdentity}, 
  TransformerWinding:{identity:namingIdentity}, TrgOps:{identity:singletonIdentity}, Val:{identity:function(e) {
    if (!e.parentElement) {
      return NaN;
    }
    const sGroup = e.getAttribute("sGroup"), index = Array.from(e.parentElement.children).filter(child => child.getAttribute("sGroup") === sGroup).findIndex(child => child.isSameNode(e));
    return `${identity(e.parentElement)}>${sGroup ? `${sGroup}` : ""} ${index}`;
  }}, ValueHandling:{identity:singletonIdentity}, Voltage:{identity:singletonIdentity}, VoltageLevel:{identity:namingIdentity}};
};

//# sourceMappingURL=module$node_modules$$openenergytools$scl_lib$dist$tBaseElement$identity.js.map
