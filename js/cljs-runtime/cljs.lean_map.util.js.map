{"version":3,"sources":["cljs/lean_map/util.cljs"],"mappings":"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","names":["cljs.lean-map.util/use-lean-map","cljs.core.atom","cljs.lean-map.util/cljs-persistent-assoc","cljs.lean_map.util.goog$module$goog$object.clone","cljs.core/PersistentArrayMap","cljs.lean-map.util/cljs-transient-assoc","cljs.core/TransientArrayMap","cljs.lean-map.util/array->transient-lean-map","len","arr","out","cljs.core/transient","cljs.lean-map.core/PersistentHashMap","i","cljs.core.assoc_BANG_","cljs.lean-map.util/lean-transient-assoc","tcoll","key","val","idx","cljs.core/array-map-index-of","js/Error","cljs.lean-map.util/lean-persistent-assoc","coll","k","v","cljs.core/array-map-extend-kv","cljs.core/meta","cljs.core.into","cljs.core/-assoc","cljs.core/-with-meta","G__22603","cljs.core/aclone","cljs.lean-map.util/empty","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","cljs.lean-map.util/hash-map","seq22604","self__5712__auto__","cljs.core/seq","keyvals","in","cljs.core/nnext","cljs.core/first","cljs.core/second","cljs.core/persistent!","cljs.lean-map.util/set-maps-to-lean-map!","cljs.core/reset!","cljs.lean-map.util/set-maps-to-cljs-map!","cljs.core/deref","cljs.lean-map.util/using-lean-maps?","cljs.lean-map.util/lean-map?","m","cljs.lean-map.core/TransientHashMap","cljs.lean-map.util/lean-map-seq?","s","cljs.lean-map.core/NodeSeq"],"sourcesContent":["(ns cljs.lean-map.util\n  (:require [cljs.lean-map.core :as c]\n            [goog.object :as gobj])\n  (:refer-clojure :exclude [empty hash-map]))\n\n(def use-lean-map (atom false))\n\n(def cljs-persistent-assoc (.-cljs$core$IAssociative$_assoc$arity$3 (gobj/clone (.-prototype PersistentArrayMap))))\n(def cljs-transient-assoc (.-cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 (gobj/clone (.-prototype TransientArrayMap))))\n\n(defn- array->transient-lean-map [len arr]\n  (loop [out (transient (.-EMPTY c/PersistentHashMap))\n         i   0]\n    (if (< i len)\n      (recur (assoc! out (aget arr i) (aget arr (inc i))) (+ i 2))\n      out)))\n\n(defn- lean-transient-assoc [tcoll key val]\n  (if (.-editable? tcoll)\n    (let [idx (array-map-index-of tcoll key)]\n      (if (== idx -1)\n        (if (<= (+ (.-len tcoll) 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))\n          (do (set! (.-len tcoll ) (+ (.-len tcoll) 2))\n              (.push (.-arr tcoll) key)\n              (.push (.-arr tcoll) val)\n              tcoll)\n          (assoc! (array->transient-lean-map (.-len tcoll) (.-arr tcoll)) key val))\n        (if (identical? val (aget (.-arr tcoll) (inc idx)))\n          tcoll\n          (do (aset (.-arr tcoll) (inc idx) val)\n              tcoll))))\n    (throw (js/Error. \"assoc! after persistent!\"))))\n\n(defn- lean-persistent-assoc [coll k v]\n  (let [idx (array-map-index-of coll k)]\n    (cond\n      (== idx -1)\n      (if (< (.-cnt coll) (.-HASHMAP-THRESHOLD PersistentArrayMap))\n        (let [arr (array-map-extend-kv coll k v)]\n          (PersistentArrayMap. meta (inc (.-cnt coll)) arr nil))\n        (-> (into (.-EMPTY c/PersistentHashMap) coll)\n            (-assoc k v)\n            (-with-meta meta)))\n\n      (identical? v (aget (.-arr coll) (inc idx)))\n      coll\n\n      :else\n      (let [arr (doto (aclone (.-arr coll))\n                  (aset (inc idx) v))]\n        (PersistentArrayMap. meta (.-cnt coll) arr nil)))))\n\n(def empty (.-EMPTY c/PersistentHashMap))\n\n(defn hash-map\n  \"keyval => key val\n  Returns a new lean map with supplied mappings.\"\n  [& keyvals]\n  (loop [in (seq keyvals), out (transient (.-EMPTY c/PersistentHashMap))]\n    (if in\n      (recur (nnext in) (assoc! out (first in) (second in)))\n      (persistent! out))))\n\n(defn set-maps-to-lean-map!\n  \"Makes Persistent and Transient ArrayMaps convert to Lean Maps at the HashMap threshold\n  (current 8 key value pairs)\"\n  []\n  (set! (.-cljs$core$IAssociative$_assoc$arity$3 (.-prototype PersistentArrayMap)) lean-persistent-assoc)\n  (set! (.-cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 (.-prototype TransientArrayMap)) lean-transient-assoc)\n  (reset! use-lean-map true))\n\n(defn set-maps-to-cljs-map!\n  \"Makes Persistent and Transient ArrayMaps convert to CLJS Maps at the HashMap threshold\n  (current 8 key value pairs)\"\n  []\n  (set! (.-cljs$core$IAssociative$_assoc$arity$3 (.-prototype PersistentArrayMap)) cljs-persistent-assoc)\n  (set! (.-cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 (.-prototype TransientArrayMap)) cljs-transient-assoc)\n  (reset! use-lean-map false))\n\n(defn using-lean-maps?\n  \"Is ClojureScript currently using Lean Maps or the default CLJS Map implementation\"\n  []\n  @use-lean-map)\n\n(defn lean-map?\n  \"Check if a map is an instance of lean-map\"\n  [m]\n  (or (instance? c/PersistentHashMap m) (instance? c/TransientHashMap m)))\n\n(defn lean-map-seq?\n  \"Checks if a sequence is an instance of the lean-map seq\"\n  [s]\n  (instance? c/NodeSeq s))"],"x_google_ignoreList":[0]}